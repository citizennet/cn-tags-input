{"version":3,"sources":["all.js","cn-tags-input.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_typeof","Symbol","iterator","constructor","empty","_","forOwn","_value","coll","set","SimplePubSub","events","on","names","handler","split","forEach","name","push","this","trigger","args","angular","call","destroy","makeObjectArray","array","key2","length","isObject","item","index","getArrayModelVal","options","arrayValueType","map","valueProperty","pluck","findInObjectArray","i","l","isFunction","objVal","has","toJson","toLowerCase","replaceAll","str","substr","newSubstr","expression","replace","RegExp","matchTagsWithModel","tags","model","isArray","equals","some","tag","findTagsForValue","filter","selectAll","input","setSelectionRange","KEYS","backspace","tab","enter","escape","space","up","down","comma","tagsInput","module","directive","$timeout","$document","tagsInputConfig","$sce","$rootScope","TagList","getTagText","setTagText","tagIsValid","self","itemFormatter","displayProperty","text","tagText","minLength","maxLength","allowedTagsPattern","test","items","addText","add","disabled","trim","replaceSpacesWithDashes","maxTags","pop","$tag","$event","remove","splice","removeLast","lastTagIndex","enableEditingLastTag","selected","removeAll","restrict","require","scope","ngDisabled","onBeforeTagAdded","onBeforeTagRemoved","onBeforeTagChanged","onTagAdded","onTagRemoved","onTagChanged","onInit","newTag","transclude","templateUrl","controller","$scope","$attrs","$element","handleKeydown","e","load","placeholder","String","tabindex","Number","removeTagSymbol","fromCharCode","Boolean","addOnEnter","addOnSpace","addOnComma","addOnBlur","clearOnBlur","required","minTags","allowLeftoverText","addFromAutocompleteOnly","tagClass","modelType","hideTags","dropdownIcon","tagsStyle","allowBulk","bulkDelimiter","bulkPlaceholder","showClearAll","showClearCache","showButton","find","$on","off","tagList","processBulk","registerAutocomplete","addTag","focusInput","focus","blurInput","blur","getTags","getModel","getOptions","registerProcessBulk","fn","bulkTags","then","showBulk","registerSuggestionList","suggestionList","link","element","attrs","ngModelCtrl","tagsInputTag","beforeAndAfter","before","after","arguments","apply","handleInputKeydown","isImmediatePropagationStopped","shouldAdd","shouldRemove","keyCode","isModifier","shiftKey","altKey","ctrlKey","metaKey","addKeys","hotkeys","indexOf","$apply","preventDefault","handleInputBlur","blurTimeout","activeElement","prop","lostFocusToBrowserWindow","lostFocusToChildElement","contains","hasFocus","handleInputFocus","target","cancel","val","$root","$$phase","handleTextareaKeydown","handleDivClick","$target","$","closest","parent","hasClass","__tag","textarea","div","inputId","$name","undefined","invalid","$setValidity","getDisplayText","getDisplayHtml","trustAsHtml","track","newTagChange","each","first","triggerInit","prev","criteria","$prev","$setter","_ref2","$watch","changed","init","isUndefined","isDefined","$setDirty","uglyHackTimeout","$filter","$parse","Api","$q","SuggestionList","debouncedLoadId","getDifference","lastPromise","groupList","splitListItems","formatItemText","mapIndexes","list","groupBy","keys","filtered","group","indexes","groups","formatter","addItem","toAdd","childKey","searchKeys","child","array1","array2","reset","visible","query","show","select","promise","filterBy","processItems","isGroups","label","slice","maxResultsToShow","itemMap","data","skipFiltering","_load","debounceDelay","clearCache","event","_source","source","$query","refreshData","results","d","defer","resolve","selectNext","selectPrior","elem","customTemplateUrl","tagsInputCtrl","autoCompleteTag","getItemText","documentClick","highlightMatchedText","dropdownStyle","tagsValue","addSuggestion","added","copy","highlight","match","s","join","noResultsMessage","_ref3","addTags","times","batch","multiple","parseInt","_tagsInput$addTag","handled","immediatePropagationStopped","stopImmediatePropagation","stopPropagation","isDefaultPrevented","type","tagName","ctrl","transcludeFn","clone","append","span","resize","THRESHOLD","css","originalValue","width","isString","$parsers","unshift","$formatters","$observe","$modelValue","provider","globalDefaults","interpolationStatus","setDefaults","defaults","setActiveInterpolation","$get","$interpolate","converters","uid","uniqueId","localDefault","converter","getDefault","updateValue","globalValue","$parent","run","$templateCache","put"],"mappings":"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","file":"all.min.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*!;\n  tagsInput = null;\n * ngTagsInput v2.0.1\n * http://mbenford.github.io/ngTagsInput\n *\n * Copyright (c) 2013-2014 Michael Benford\n * License: MIT\n *\n * Generated at 2014-04-13 21:25:38 -0300\n */\n(function () {\n  'use strict';\n\n  var KEYS = {\n    backspace: 8,\n    tab: 9,\n    enter: 13,\n    escape: 27,\n    space: 32,\n    up: 38,\n    down: 40,\n    comma: 188\n  };\n\n  function empty(obj) {\n    _.forOwn(obj, function (_value, key, coll) {\n      _.set(coll, key, null);\n    });\n  }\n\n  function SimplePubSub() {\n    var events = {};\n    return {\n      on: function on(names, handler) {\n        names.split(' ').forEach(function (name) {\n          if (!events[name]) {\n            events[name] = [];\n          }\n          events[name].push(handler);\n        });\n        return this;\n      },\n      trigger: function trigger(name, args) {\n        angular.forEach(events[name], function (handler) {\n          handler.call(null, args);\n        });\n        return this;\n      },\n      destroy: function destroy() {\n        empty(events);\n        events = null;\n      }\n    };\n  }\n\n  function makeObjectArray(array, key, key2) {\n    array = array || [];\n    if (array.length > 0 && !angular.isObject(array[0])) {\n      array.forEach(function (item, index) {\n        array[index] = _defineProperty({}, key, item);\n        if (key2) array[index][key2] = item;\n      });\n    }\n    return array;\n  }\n\n  function getArrayModelVal(array, options) {\n    if (options.arrayValueType === 'object') {\n      return (array || []).map(function (item) {\n        return _.isObject(item && item[options.valueProperty]) ? item[options.valueProperty] : item;\n      });\n    } else {\n      return _.pluck(array, options.valueProperty);\n    }\n  }\n\n  function findInObjectArray(array, obj, key) {\n    var item = null;\n    var i = 0;\n    var l = array.length;\n\n    if (_.isFunction(key)) {\n      var objVal = key(obj);\n      if (!objVal) return null;\n      for (; i < l; i++) {\n        if (objVal === key(array[i])) {\n          item = array[i];\n          break;\n        }\n      }\n    } else {\n      for (; i < l; i++) {\n        // I'm aware of the internationalization issues regarding toLowerCase()\n        // but I couldn't come up with a better solution right now\n        if (_.has(obj, key) && _.has(array[i], key) && (angular.toJson(array[i][key]) + '').toLowerCase() === (angular.toJson(obj[key]) + '').toLowerCase()) {\n          item = array[i];\n          break;\n        }\n      }\n    }\n    return item;\n  }\n\n  function replaceAll(str, substr, newSubstr) {\n    var expression = substr.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n    return str.replace(new RegExp(expression, 'gi'), newSubstr);\n  }\n\n  function matchTagsWithModel(tags, model, options) {\n    if (!model || !tags || !tags.length) return false;\n\n    if (!_.isArray(model)) {\n      return angular.equals(model, tags[0][options.valueProperty]) || angular.equals(model, tags[0]);\n    }\n\n    var array = getArrayModelVal(tags, options);\n    return array.some(function (tag, i) {\n      return angular.equals(model[i], tag) || angular.equals(model[i], tag[options.valueProperty]);\n    });\n  }\n\n  function findTagsForValue(tags, value, options) {\n    return tags.filter(function (tag) {\n      return tag[options.valueProperty] === value;\n    });\n  }\n\n  function selectAll(input) {\n    if (input.value) {\n      input.setSelectionRange(0, input.value.length);\n    }\n  }\n\n  var tagsInput = angular.module('cnTagsInput', []);\n\n  /**\n   * @ngdoc directive\n   * @name tagsInput\n   * @module cnTagsInput\n   *\n   * @description\n   * Renders an input box with tag editing support.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} [displayProperty=text] Property to be rendered as the tag label.\n   * @param {string=} [valueProperty=value] Property to be used as the value when modelType is not array/object.\n   * @param {number=} tabindex Tab order of the control.\n   * @param {string=} [placeholder=Add a tag] Placeholder text for the control.\n   * @param {number=} [minLength=3] Minimum length for a new tag.\n   * @param {number=} maxLength Maximum length allowed for a new tag.\n   * @param {boolean=} required Sets required validation error key.\n   * @param {number=} minTags Sets minTags validation error key if the number of tags added is less than minTags.\n   * @param {number=} maxTags Sets maxTags validation error key if the number of tags added is greater than maxTags.\n   * @param {boolean=} [allowLeftoverText=false] Sets leftoverText validation error key if there is any leftover text in\n   *                                             the input element when the directive loses focus.\n   * @param {string=} [removeTagSymbol=×] Symbol character for the remove tag button.\n   * @param {boolean=} [addOnEnter=true] Flag indicating that a new tag will be added on pressing the ENTER key.\n   * @param {boolean=} [addOnSpace=false] Flag indicating that a new tag will be added on pressing the SPACE key.\n   * @param {boolean=} [addOnComma=true] Flag indicating that a new tag will be added on pressing the COMMA key.\n   * @param {boolean=} [addOnBlur=false] Flag indicating that a new tag will be added when the input field loses focus.\n   * @param {boolean=} [clearOnBlur=false] Flag indicating whether to clear the typed text when the input field loses focus.\n   * @param {boolean=} [replaceSpacesWithDashes=false] Flag indicating that spaces will be replaced with dashes.\n   * @param {string=} [allowedTagsPattern=.+] Regular expression that determines whether a new tag is valid.\n   * @param {boolean=} [enableEditingLastTag=false] Flag indicating that the last tag will be moved back into\n   *                                                the new tag input box instead of being removed when the backspace key\n   *                                                is pressed and the input box is empty.\n   * @param {boolean=} [addFromAutocompleteOnly=false] Flag indicating that only tags coming from the autocomplete list will be allowed.\n   *                                                   When this flag is true, addOnEnter, addOnComma, addOnSpace, addOnBlur and\n   *                                                   allowLeftoverText values are ignored.\n   * @param {expression} onBeforeTagAdded Expression to evaluate upon adding a new tag. The new tag is available as $tag.\n   * @param {expression} onBeforeTagRemoved Expression to evaluate upon removing an existing tag. The removed tag is available as $tag.\n   * @param {expression} onBeforeTagChanged Expression to evaluate upon adding or removing a tag. The affected tag is available as $tag. Prev value avialble as $prev.\n   * @param {expression} onTagAdded Expression to evaluate upon adding a new tag. The new tag is available as $tag.\n   * @param {expression} onTagRemoved Expression to evaluate upon removing an existing tag. The removed tag is available as $tag.\n   * @param {expression} onTagChanged Expression to evaluate upon adding or removing a tag. The affected tag is available as $tag. Prev value avialble as $prev.\n   * @param {expression} onInit Expression to evaluate upon initializing model value.\n   * @param {string} modelType Defines ngModel type, if anything other than array, model is set to first tag in list\n   * @param {string} arrayValueType Defines ngModel[] type, if anything other than object, value is set mapped from object's values\n   * @param {boolean=} [hideTags=false] Flag indicating whether to hide tag list (for manually displaying tag list in other way)\n   * @param {boolean=} [dropdownIcon=false] Flag to show icon on right side\n   * @param {string=} [tagsStyle='tags'] Default tags style\n   */\n  tagsInput.directive('tagsInput', [\"$timeout\", \"$document\", \"tagsInputConfig\", \"$sce\", \"$rootScope\", function ($timeout, $document, tagsInputConfig, $sce, $rootScope) {\n    function TagList(options, events) {\n      var self = {},\n          getTagText,\n          setTagText,\n          tagIsValid;\n\n      getTagText = options.getTagText = function (tag) {\n        if (!_.isObject(tag)) return tag;\n        return options.itemFormatter ? options.itemFormatter(tag) : tag[options.displayProperty];\n      };\n\n      setTagText = function setTagText(tag, text) {\n        // only create tag object when not adding from auto-complete\n        if (tag[options.displayProperty]) return;\n\n        tag[options.displayProperty] = text;\n        if (options.valueProperty && !_.has(tag, options.valueProperty)) {\n          tag[options.valueProperty] = text;\n        }\n      };\n\n      tagIsValid = function tagIsValid(tag) {\n        var tagText = getTagText(tag) + '';\n\n        return (!options.minLength || tagText.length >= options.minLength) && (!options.maxLength || tagText.length <= options.maxLength) && options.allowedTagsPattern.test(tagText) && !findInObjectArray(self.items, tag, options.valueProperty || getTagText);\n      };\n\n      self.items = [];\n\n      self.addText = function (text) {\n        var tag = {};\n        setTagText(tag, text);\n        self.add(tag);\n      };\n\n      self.add = function (tag) {\n        if (tag.disabled) return;\n\n        var tagText = getTagText(tag);\n\n        if (tagText.trim) tagText = tagText.trim();\n\n        if (options.replaceSpacesWithDashes) {\n          tagText = tagText.replace(/\\s/g, '-');\n        }\n\n        setTagText(tag, tagText);\n\n        if (tagIsValid(tag)) {\n          if (options.maxTags && self.items.length >= options.maxTags) {\n            self.items.pop();\n            events.trigger('tag-removed', { $tag: tag, $event: 'tag-removed' });\n          }\n          self.items.push(tag);\n          events.trigger('tag-added', { $tag: tag, $event: 'tag-added' });\n        } else {\n          events.trigger('invalid-tag', { $tag: tag, $event: 'invalid-tag' });\n        }\n\n        return tag;\n      };\n\n      self.remove = function (index) {\n        var tag = self.items.splice(index, 1)[0];\n        events.trigger('tag-removed', { $tag: tag, $event: 'tag-removed' });\n        return tag;\n      };\n\n      self.removeLast = function () {\n        var tag,\n            lastTagIndex = self.items.length - 1;\n\n        if (options.enableEditingLastTag || self.selected) {\n          self.selected = null;\n          tag = self.remove(lastTagIndex);\n        } else if (!self.selected) {\n          self.selected = self.items[lastTagIndex];\n        }\n\n        return tag;\n      };\n\n      self.removeAll = function () {\n        var tags = self.items.splice(0, self.items.length);\n        tags.forEach(function (tag) {\n          events.trigger('tag-removed', { $tag: tag, $event: 'tag-removed' });\n        });\n      };\n\n      self.destroy = function () {\n        empty(self);\n        self = null;\n      };\n\n      return self;\n    }\n\n    return {\n      restrict: 'E',\n      require: 'ngModel',\n      scope: {\n        tags: '=ngModel',\n        itemFormatter: '=',\n        ngDisabled: '=',\n        onBeforeTagAdded: '&',\n        onBeforeTagRemoved: '&',\n        onBeforeTagChanged: '&',\n        onTagAdded: '&',\n        onTagRemoved: '&',\n        onTagChanged: '&',\n        onInit: '&',\n        newTag: '=?'\n      },\n      replace: false,\n      transclude: true,\n      templateUrl: 'cnTagsInput/tags-input.html',\n      controller: [\"$scope\", \"$attrs\", \"$element\", function ($scope, $attrs, $element) {\n        tagsInputConfig.load('tagsInput', $scope, $attrs, {\n          placeholder: [String, ''],\n          tabindex: [Number],\n          removeTagSymbol: [String, String.fromCharCode(215)],\n          replaceSpacesWithDashes: [Boolean, false],\n          minLength: [Number, 2],\n          maxLength: [Number],\n          addOnEnter: [Boolean, true],\n          addOnSpace: [Boolean, false],\n          addOnComma: [Boolean, true],\n          addOnBlur: [Boolean, false],\n          clearOnBlur: [Boolean, false],\n          allowedTagsPattern: [RegExp, /.+/],\n          enableEditingLastTag: [Boolean, false],\n          required: [Boolean, false],\n          minTags: [Number],\n          maxTags: [Number],\n          displayProperty: [String, 'text'],\n          valueProperty: [String],\n          allowLeftoverText: [Boolean, false],\n          addFromAutocompleteOnly: [Boolean, false],\n          tagClass: [String, ''],\n          modelType: [String, 'array'],\n          arrayValueType: [String, 'object'],\n          hideTags: [Boolean, false],\n          dropdownIcon: [Boolean, false],\n          tagsStyle: [String, 'tags'],\n          allowBulk: [Boolean, false],\n          bulkDelimiter: [RegExp, /, ?|\\n/],\n          bulkPlaceholder: [String, 'Enter a list separated by commas or new lines'],\n          showClearAll: [Boolean, false],\n          showClearCache: [Boolean, false],\n          showButton: [Boolean, false]\n        });\n\n        var options = $scope.options;\n        var input = options.input = $element.find('input.input');\n\n        function handleKeydown(e) {\n          $scope.events.trigger('input-keydown', e);\n        }\n\n        input.on('keydown', handleKeydown);\n\n        $scope.$on('$destroy', function () {\n          input.off('keydown', handleKeydown);\n          input = null;\n          empty(options);\n          options = null;\n          $scope.events.destroy();\n          $scope.tagList.destroy();\n          $scope.processBulk = null;\n        });\n\n        if (!options.valueProperty && (!/object|array/.test(options.modelType) || options.arrayValueType !== 'object')) {\n          options.valueProperty = 'value';\n        }\n\n        if ($scope.itemFormatter) options.itemFormatter = $scope.itemFormatter;\n\n        if (options.tagsStyle === 'tags') {\n          options.tagClass = options.tagClass || 'label-primary';\n        }\n\n        if (options.allowBulk && (options.modelType !== 'array' || options.maxTags === 1)) {\n          options.allowBulk = false;\n        }\n\n        $scope.events = new SimplePubSub();\n        $scope.tagList = new TagList(options, $scope.events);\n\n        this.registerAutocomplete = function () {\n          return {\n            addTag: function addTag(tag) {\n              return $scope.tagList.add(tag);\n            },\n            focusInput: function focusInput() {\n              input[0].focus();\n            },\n            blurInput: function blurInput() {\n              input[0].blur();\n            },\n            getTags: function getTags() {\n              return $scope.tagList.items;\n            },\n            getModel: function getModel() {\n              return $scope.tags;\n            },\n            getOptions: function getOptions() {\n              return options;\n            },\n            on: function on(name, handler) {\n              $scope.events.on(name, handler);\n              return this;\n            },\n            registerProcessBulk: function registerProcessBulk(fn) {\n              $scope.processBulk = function () {\n                fn($scope.bulkTags).then(function () {\n                  $scope.showBulk = false;\n                  $scope.bulkTags = '';\n                });\n              };\n            },\n            registerSuggestionList: function registerSuggestionList(suggestionList) {\n              $scope.tagList.suggestionList = suggestionList;\n            }\n          };\n        };\n      }],\n      link: function link(scope, element, attrs, ngModelCtrl) {\n        function tagsInputTag() {}\n        scope.__tag = new tagsInputTag();\n\n        var hotkeys = [KEYS.enter, KEYS.comma, KEYS.space, KEYS.backspace],\n            tagList = scope.tagList,\n            events = scope.events,\n            options = scope.options,\n            input = element.find('input.input'),\n            textarea = element.find('textarea'),\n            div = element.find('div'),\n            blurTimeout;\n\n        if (attrs.inputId && !ngModelCtrl.$name) {\n          ngModelCtrl.$name = attrs.inputId;\n        }\n\n        // before callbacks allow code to modify tag before it's added\n        // after callback fired after ngModel has chance to update\n        function beforeAndAfter(before, after) {\n          return function () {\n            var args = arguments;\n            before.apply(this, args);\n            $timeout(function () {\n              after.apply(this, args);\n            });\n          };\n        }\n\n        events.on('tag-added', beforeAndAfter(scope.onBeforeTagAdded, scope.onTagAdded)).on('tag-removed', beforeAndAfter(scope.onBeforeTagRemoved, scope.onTagRemoved)).on('tag-changed', beforeAndAfter(scope.onBeforeTagChanged, scope.onTagChanged)).on('tag-init', scope.onInit).on('tag-added tag-removed', function (e) {\n          if (!options.maxTags || options.maxTags > scope.tagList.items.length) {\n            selectAll(options.input[0]);\n          } else {\n            scope.newTag.text = '';\n          }\n          if (options.modelType === 'array') {\n            if (!options.valueProperty) {\n              scope.tags = scope.tagList.items;\n            } else {\n              scope.tags = getArrayModelVal(scope.tagList.items, options);\n            }\n          } else {\n            if (e.$event === 'tag-removed') {\n              scope.tags = undefined;\n            } else {\n              if (!options.valueProperty) {\n                scope.tags = e.$tag;\n              } else {\n                scope.tags = _.has(e.$tag, options.valueProperty) ? e.$tag[options.valueProperty] : e.$tag[options.displayProperty];\n              }\n            }\n          }\n        }).on('invalid-tag', function () {\n          scope.newTag.invalid = true;\n        }).on('input-change', function () {\n          tagList.selected = null;\n          scope.newTag.invalid = null;\n        }).on('input-focus', function () {\n          ngModelCtrl.$setValidity('leftoverText', true);\n        }).on('input-blur', function () {\n          if (!options.addFromAutocompleteOnly) {\n            if (options.addOnBlur && scope.newTag.text) {\n              tagList.addText(scope.newTag.text);\n            }\n          }\n\n          // Reset newTag\n          if (options.clearOnBlur) {\n            scope.newTag.text = '';\n            scope.newTag.invalid = null;\n          }\n        });\n\n        scope.newTag = { text: '', invalid: null };\n\n        scope.getDisplayText = scope.itemFormatter || function (tag) {\n          return tag && ((tag[options.displayProperty] || 'undefined') + '').trim();\n        };\n\n        scope.getDisplayHtml = function (tag) {\n          return $sce.trustAsHtml(scope.getDisplayText(tag));\n        };\n\n        scope.track = function (tag) {\n          return tag[options.displayProperty];\n        };\n\n        scope.newTagChange = function () {\n          events.trigger('input-change', scope.newTag.text);\n        };\n\n        scope.processBulk = scope.processBulk || function () {\n          var tags = scope.bulkTags.split(options.bulkDelimiter);\n          _.each(tags, function (text) {\n            var tag = {};\n            tag[options.displayProperty] = text;\n            scope.tagList.add(tag);\n          });\n          scope.showBulk = false;\n          scope.bulkTags = '';\n        };\n\n        var first = true;\n\n        scope.triggerInit = function (value, prev) {\n          var criteria = options.valueProperty ? _defineProperty({}, options.valueProperty, value) : value;\n          if (!tagList.items.length || !_.find(tagList.items, criteria)) {\n            events.trigger('tag-init', {\n              $tag: value,\n              $prev: prev,\n              $event: 'tag-init',\n              $setter: function $setter(val) {\n                if (val && !_.isObject(val)) {\n                  var _ref2;\n\n                  tagList.items = [(_ref2 = {}, _defineProperty(_ref2, options.displayProperty, val), _defineProperty(_ref2, options.valueProperty, val), _ref2)];\n                } else {\n                  tagList.items = _.isArray(val) ? val : [val];\n                }\n                return tagList.items;\n              }\n            });\n          }\n        };\n\n        scope.$watch('tags', function (value, prev) {\n          var changed = !angular.equals(value, prev);\n          var init = !changed && first;\n\n          if (init) {\n            scope.triggerInit(value, prev);\n          }\n          if (changed) {\n            events.trigger('tag-changed', {\n              $tag: value,\n              $prev: prev,\n              $event: 'tag-changed'\n            });\n          }\n\n          if (options.modelType === 'array') {\n            if (_.isArray(value)) {\n              if (value.length) {\n                if (!matchTagsWithModel(tagList.items, scope.tags, options)) {\n                  scope.triggerInit(value, prev);\n                }\n                if (!matchTagsWithModel(tagList.items, scope.tags, options) || tagList.items.length !== scope.tags.length) {\n                  tagList.items = makeObjectArray(value, options.displayProperty, options.valueProperty);\n                  scope.tags = getArrayModelVal(tagList.items, options);\n                  return;\n                }\n              } else {\n                tagList.items = [];\n                if (angular.isUndefined(prev)) return;\n              }\n            } else if (value === undefined) {\n              tagList.items = [];\n              scope.tags = [];\n              return;\n            }\n          } else if (angular.isDefined(value)) {\n            if (_.isArray(value)) {\n              if (value.length) {\n                //if(options.modelType === 'object') {\n                if (!options.valueProperty) {\n                  scope.tags = value[0];\n                } else {\n                  scope.tags = value[0][options.valueProperty];\n                }\n\n                return;\n              } else {\n                scope.tags = undefined;\n              }\n            } else {\n              if (options.modelType === 'object') {\n                if (value !== null) tagList.items = [value];\n              } else {\n                if (_.isObject(value)) {\n                  tagList.items = [value];\n\n                  var val = value[options.valueProperty];\n                  if (_.isUndefined(val)) val = value[options.displayProperty];\n                  scope.tags = val;\n\n                  return;\n                } else if (!_.isUndefined(value) && (!tagList.items.length || tagList.items[0][options.valueProperty] !== value)) {\n                  scope.triggerInit(value, prev);\n                }\n              }\n            }\n          } else if (!value && tagList.items.length) {\n            tagList.items = [];\n          }\n\n          if (!init && changed) {\n            ngModelCtrl.$setDirty();\n          }\n\n          // hack because schemaForm is incorrectly invalidating model sometimes\n          ngModelCtrl.$setValidity('schemaForm', true);\n          if (options.modelType === 'array') {\n            ngModelCtrl.$setValidity('tv4-401', value && options.maxTags ? value.length <= options.maxTags : true);\n            ngModelCtrl.$setValidity('tv4-302', value ? angular.isDefined(options.minTags) ? value.length >= options.minTags : true : false);\n          } else {\n            ngModelCtrl.$setValidity('tv4-302', !options.required || !angular.isUndefined(value));\n          }\n\n          first = false;\n        }, true);\n\n        function handleInputKeydown(e) {\n          // This hack is needed because jqLite doesn't implement stopImmediatePropagation properly.\n          // I've sent a PR to Angular addressing this issue and hopefully it'll be fixed soon.\n          // https://github.com/angular/angular.js/pull/4833\n          if (e.isImmediatePropagationStopped && e.isImmediatePropagationStopped()) {\n            return;\n          }\n\n          var key = e.keyCode,\n              isModifier = e.shiftKey || e.altKey || e.ctrlKey || e.metaKey,\n              addKeys = {},\n              shouldAdd,\n              shouldRemove;\n\n          if (isModifier || hotkeys.indexOf(key) === -1) {\n            return;\n          }\n\n          addKeys[KEYS.enter] = options.addOnEnter;\n          addKeys[KEYS.comma] = options.addOnComma;\n          addKeys[KEYS.space] = options.addOnSpace;\n\n          shouldAdd = !options.addFromAutocompleteOnly && addKeys[key];\n          shouldRemove = !shouldAdd && key === KEYS.backspace && scope.newTag.text.length === 0;\n\n          if (shouldAdd) {\n            tagList.addText(scope.newTag.text);\n\n            scope.$apply();\n            e.preventDefault();\n          } else if (shouldRemove) {\n            var tag = tagList.removeLast();\n            if (tag && options.enableEditingLastTag) {\n              scope.newTag.text = tag[options.displayProperty];\n            }\n\n            scope.$apply();\n            e.preventDefault();\n          }\n        }\n\n        function handleInputBlur(e) {\n          blurTimeout = $timeout(function () {\n            // race condition can cause input to be destroyed before timeout ends\n            if (!input) return false;\n            var activeElement = $document.prop('activeElement'),\n                lostFocusToBrowserWindow = activeElement === input[0],\n                lostFocusToChildElement = element.find('.host')[0].contains(activeElement);\n\n            if (lostFocusToBrowserWindow || !lostFocusToChildElement) {\n              scope.hasFocus = false;\n              events.trigger('input-blur', e);\n            }\n          }, 150); // timeout so that click event triggers first\n        }\n\n        function handleInputFocus(e) {\n          if (e) e.preventDefault();\n          if (scope.ngDisabled) return;\n\n          selectAll(e.target);\n\n          if (blurTimeout) $timeout.cancel(blurTimeout);\n\n          scope.hasFocus = true;\n          events.trigger('input-focus', input.val());\n\n          if (!/apply|digest/.test(scope.$root.$$phase)) scope.$apply();\n        }\n\n        function handleTextareaKeydown(e) {\n          if (e.keyCode === KEYS.enter) {\n            if (!e.altKey && !e.ctrlKey && !e.metaKey && !e.shiftKey) {\n              e.preventDefault();\n              scope.processBulk();\n            }\n          }\n        }\n\n        function handleDivClick(e) {\n          var $target = $(e.target);\n          if (!$target.closest('.suggestion').length &&\n          // we don't want any of the buttons underneath to trigger\n          !$target.parent().hasClass('help-block')) {\n            e.preventDefault();\n            input[0].focus();\n          }\n        }\n\n        // stupid ugly hack to fix order between input and autocomplete events\n        var uglyHackTimeout = $timeout(function () {\n          input.on('keydown', handleInputKeydown).on('focus', handleInputFocus).on('blur', handleInputBlur);\n        });\n\n        textarea.on('keydown', handleTextareaKeydown);\n\n        div.on('click', handleDivClick);\n\n        scope.$on('$destroy', function () {\n          input.off('keydown', handleInputKeydown).off('focus', handleInputFocus).off('blur', handleInputBlur);\n\n          textarea.off('keydown', handleTextareaKeydown);\n          div.off('click', handleDivClick);\n          input = null;\n          textarea = null;\n          div = null;\n          events.destroy();\n          events = null;\n          first = null;\n          hotkeys = null;\n          options = null;\n          tagList = null;\n          $timeout.cancel(uglyHackTimeout);\n        });\n      }\n    };\n  }]);\n\n  /**\n   * @ngdoc directive\n   * @name autoComplete\n   * @module cnTagsInput\n   *\n   * @description\n   * Provides autocomplete support for the tagsInput directive.\n   *\n   * @param {expression} source Expression to evaluate upon changing the input content. The input value is available as\n   *                            $query. The result of the expression must be a promise that eventually resolves to an\n   *                            array of strings.\n   * @param {number=} [debounceDelay=100] Amount of time, in milliseconds, to wait before evaluating the expression in\n   *                                      the source option after the last keystroke.\n   * @param {number=} [minLength=3] Minimum number of characters that must be entered before evaluating the expression\n   *                                 in the source option.\n   * @param {boolean=} [highlightMatchedText=true] Flag indicating that the matched text will be highlighted in the\n   *                                               suggestions list.\n   * @param {number=} [maxResultsToShow=10] Maximum number of results to be displayed at a time.\n   */\n  tagsInput.directive('autoComplete', [\"$document\", \"$timeout\", \"$filter\", \"$sce\", \"tagsInputConfig\", \"$parse\", 'Api', '$q', function ($document, $timeout, $filter, $sce, tagsInputConfig, $parse, Api, $q) {\n    function SuggestionList(scope, options) {\n      var self = {},\n          debouncedLoadId,\n          getDifference,\n          lastPromise,\n          groupList,\n          splitListItems,\n          formatItemText,\n          mapIndexes;\n\n      groupList = function groupList(list, groupBy) {\n        var filtered = {},\n            map = [],\n            index = 0,\n            keys;\n\n        // loop through each item in the list\n        _.each(list, function (item) {\n          keys = $parse(groupBy)(item);\n          if (!_.isArray(keys)) keys = [keys];\n          _.each(keys, function (key) {\n            if (!filtered[key]) {\n              filtered[key] = [];\n            }\n            filtered[key].push(item);\n          });\n        });\n\n        _.each(filtered, function (group) {\n          group.indexes = [];\n          _.each(group, function (item) {\n            group.indexes.push(index++);\n            map.push(item);\n          });\n        });\n\n        return {\n          groups: filtered,\n          map: map\n        };\n      };\n\n      formatItemText = function formatItemText(item, formatter) {\n        if (formatter) {\n          if (!_.isArray(formatter)) {\n            formatter = [formatter, {}];\n          }\n          return $parse(formatter[0])((formatter[1].val = item) && formatter[1]);\n        }\n\n        return item;\n      };\n\n      splitListItems = function splitListItems(items) {\n        var keys = [];\n\n        function addItem(key, item, group, prop) {\n          var text = _.isObject(item) ? item[prop || options.tagsInput.displayProperty] : item,\n              toAdd = {\n            text: formatItemText(text, group.formatter),\n            value: text,\n            key: key,\n            childKey: prop /*,\n                           tagClass: options.tagClasses && options.tagClasses[key] || options.tagClass*/\n          };\n\n          if (!_.find(group.items, toAdd)) {\n            group.items.push(toAdd);\n          }\n        }\n\n        _.each(scope.searchKeys, function (group) {\n          var key = group.key;\n          group.items = [];\n\n          _.each(items, function (item) {\n            if (item[key]) {\n              if (_.isArray(item[key])) {\n                _.each(item[key], function (child) {\n                  addItem(key, child, group, group.childKey);\n                });\n              } else {\n                addItem(key, item[key], group, group.childKey);\n              }\n            }\n          });\n          keys.push(group);\n        });\n\n        return keys;\n      };\n\n      mapIndexes = function mapIndexes(items) {\n        var map = [],\n            index = 0;\n\n        _.each(items, function (group) {\n          group.indexes = [];\n          _.each(group.items, function (item) {\n            group.indexes.push(index++);\n            map.push(item);\n          });\n        });\n\n        return map;\n      };\n\n      getDifference = function getDifference(array1, array2) {\n        if (!array2.length) {\n          return array1.filter(function (item) {\n            return item[options.tagsInput.displayProperty] !== '';\n          });\n        }\n        return array1.filter(function (item) {\n          return !findInObjectArray(array2, item, options.tagsInput.valueProperty || options.tagsInput.getTagText);\n        });\n      };\n\n      self.reset = function () {\n        lastPromise = null;\n\n        self.items = [];\n        self.visible = false;\n        self.index = -1;\n        self.selected = null;\n        self.query = null;\n\n        $timeout.cancel(debouncedLoadId);\n      };\n\n      self.show = function () {\n        self.selected = null;\n        self.visible = true;\n        self.select(0);\n      };\n\n      self.load = function (query, tags) {\n        if (query.length < options.minLength) {\n          self.reset();\n          return;\n        }\n\n        var promise,\n\n        //filterBy = {},\n        filterBy = query,\n            groups,\n            processItems = function processItems(items) {\n          if (promise && promise !== lastPromise) {\n            return;\n          }\n\n          if (scope.searchKeys) {\n            scope.isGroups = true;\n            //filterBy = query;\n            items = splitListItems(items);\n          }\n          if (_.isObject(items) && !_.isArray(items)) {\n            scope.isGroups = true;\n            items = _.map(items, function (list, group) {\n              return {\n                items: list,\n                label: group\n              };\n            });\n          }\n          if (scope.isGroups) {\n            _.each(items, function (group) {\n              group.items = getDifference(group.items, tags);\n              if (query) group.items = $filter('cnFilter')(group.items, filterBy);\n\n              group.items = group.items.slice(0, options.maxResultsToShow);\n            });\n            self.itemMap = mapIndexes(items);\n          } else {\n            //filterBy[options.tagsInput.displayProperty] = query;\n            items = makeObjectArray(items.data || items, options.tagsInput.displayProperty);\n            items = getDifference(items, tags);\n            if (query && !options.skipFiltering) {\n              items = $filter('cnFilter')(items, filterBy);\n            }\n\n            items = items.slice(0, options.maxResultsToShow);\n\n            if (options.groupBy) {\n              groups = groupList(items, options.groupBy);\n              items = groups.groups;\n              self.itemMap = groups.map;\n            }\n          }\n\n          self.items = items;\n          self.show();\n        };\n\n        $timeout.cancel(debouncedLoadId);\n        self.query = query;\n        debouncedLoadId = $timeout(function () {\n          self._load(query, promise).then(processItems);\n        }, options.minLength ? options.debounceDelay : 0, false);\n      };\n\n      self.clearCache = function (event, query) {\n        event.preventDefault();\n        if (scope._source) scope.source = scope._source;\n        var source = scope.source;\n        source({ $query: query, options: { refreshData: true } }).then(function (results) {\n          scope._source = source;\n          scope.source = function () {\n            return results;\n          };\n          scope.tagsInput.focusInput();\n        });\n      };\n\n      self._load = function (query, promise) {\n        var d = $q.defer();\n        var source = scope.source({ $query: query });\n        if (_.isArray(source)) {\n          $timeout(function () {\n            d.resolve(source || []);\n          });\n        } else {\n          if (!options.minLength) {\n            // fucking race conditions\n            var _source = scope.source;\n            source.then(function (results) {\n              scope._source = _source;\n              scope.source = function () {\n                return results;\n              };\n              d.resolve(results || []);\n            });\n          } else {\n            promise = source;\n            lastPromise = promise;\n            return promise;\n          }\n        }\n        return d.promise;\n      };\n\n      self.selectNext = function () {\n        self.select(++self.index);\n      };\n\n      self.selectPrior = function () {\n        self.select(--self.index);\n      };\n\n      self.select = function (index) {\n        var list = self.itemMap || self.items;\n        if (index < 0) {\n          index = list.length - 1;\n        } else if (index >= list.length) {\n          index = 0;\n        }\n        self.index = index;\n        if (self.itemMap) {\n          self.selected = self.itemMap[index];\n        } else {\n          self.selected = self.items[index];\n        }\n      };\n\n      return self;\n    }\n\n    function encodeHTML(value) {\n      return value ? value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;') : '';\n    }\n\n    return {\n      restrict: 'E',\n      require: '^tagsInput',\n      scope: {\n        source: '&',\n        searchKeys: '=?'\n      },\n      templateUrl: function templateUrl(elem, attrs) {\n        return attrs.customTemplateUrl || 'cnTagsInput/auto-complete.html';\n      },\n      link: function link(scope, element, attrs, tagsInputCtrl) {\n        var hotkeys = [KEYS.enter, KEYS.tab, KEYS.escape, KEYS.up, KEYS.down],\n            suggestionList,\n            tagsInput,\n            options,\n            getItemText,\n            documentClick;\n\n        function autoCompleteTag() {}\n        scope.__tag = new autoCompleteTag();\n\n        tagsInputConfig.load('autoComplete', scope, attrs, {\n          debounceDelay: [Number, 250],\n          minLength: [Number, 3],\n          highlightMatchedText: [Boolean, true],\n          maxResultsToShow: [Number, 75],\n          groupBy: [String, ''],\n          skipFiltering: [Boolean, false]\n        });\n\n        options = scope.options;\n\n        tagsInput = tagsInputCtrl.registerAutocomplete();\n        scope.tagsInput = tagsInput;\n\n        options.tagsInput = tagsInput.getOptions();\n\n        if (options.minLength === 0 /* && _.isArray(scope.source())*/) {\n            options.tagsInput.dropdownIcon = true;\n            if (options.tagsInput.maxTags === 1) {\n              options.tagsInput.dropdownStyle = 'caret';\n            } else {\n              options.tagsInput.dropdownStyle = 'fa fa-plus';\n            }\n          } else {\n          options.tagsInput.dropdownStyle = 'fa fa-search';\n        }\n\n        suggestionList = new SuggestionList(scope, options);\n        tagsInput.registerSuggestionList(suggestionList);\n\n        getItemText = options.tagsInput.itemFormatter || function (item) {\n          return String(item[options.tagsInput.displayProperty]);\n        };\n\n        scope.suggestionList = suggestionList;\n\n        var tagsValue = tagsInput.getModel();\n\n        if (options.minLength === 0 && tagsValue && !angular.equals(tagsValue, [])) {\n          suggestionList._load().then(function (results) {\n            var tags = findTagsForValue(results, tagsInput.getModel(), options.tagsInput);\n            var cur = tagsInput.getTags();\n            if (!angular.equals(tags, tagsInput.getTags())) {\n              tagsInput.getTags().length = 0; // hack to get event to retrigger\n              tags.forEach(function (tag) {\n                tagsInput.addTag(tag);\n              });\n            }\n          });\n        }\n\n        scope.addSuggestion = function (e) {\n          e.preventDefault();\n\n          var added = false;\n\n          if (suggestionList.selected) {\n            tagsInput.addTag(angular.copy(suggestionList.selected));\n\n            if (!options.tagsInput.maxTags || tagsInput.getTags().length < options.tagsInput.maxTags) {\n              var i = suggestionList.items.indexOf(suggestionList.selected);\n              suggestionList.items.splice(i, 1);\n              suggestionList.select(i);\n              tagsInput.focusInput();\n            } else {\n              suggestionList.reset();\n              tagsInput.blurInput();\n            }\n\n            added = true;\n          }\n          return added;\n        };\n\n        scope.highlight = function (item, key) {\n          var text = getItemText(item, key);\n          if (suggestionList.query && options.highlightMatchedText) {\n            text = _(text.match(/(\\<[^>]*>|[^<]*)/g)) // regex will create a list of all html and text nodes\n            .map(function (s) {\n              return s.length && s[0] !== '<' ? replaceAll(s, suggestionList.query, '<b>$&</b>') : s;\n            }).join('');\n          }\n          return $sce.trustAsHtml('<a>' + text + '</a>');\n        };\n\n        scope.track = function (item, key) {\n          return getItemText(item, key);\n        };\n\n        scope.noResultsMessage = function (_ref3) {\n          var visible = _ref3.visible,\n              query = _ref3.query;\n\n          if (!query) return 'No options...';\n          return $sce.trustAsHtml('No results for <b>' + query + '</b>...');\n        };\n\n        tagsInput.registerProcessBulk(function (bulkTags) {\n          var tags = bulkTags.split(options.tagsInput.bulkDelimiter);\n\n          var addTags = function addTags(i) {\n            return function (data) {\n              _.times(i, function (i) {\n                if (data[i]) tagsInput.addTag(data[i]);\n              });\n            };\n          };\n\n          // in case a query is involved...doesn't hurt to use even if not\n          return Api.batch(function () {\n            for (var i = 0, l = tags.length; i < l; i++) {\n              if (options.tagsInput.maxTags && tagsInput.getTags().length >= options.tagsInput.maxTags) break;\n              var tag = tags[i];\n              var times = 1;\n              var multiple = tags[i].match(/(.*) ?\\[(\\d+)\\]$/);\n\n              if (multiple) {\n                tag = multiple[1];\n                times = parseInt(multiple[2]);\n              }\n\n              var results = scope.source({ $query: tag });\n\n              if (_.isArray(results)) {\n                if (results.length) {\n                  if (!options.skipFiltering) {\n                    var filterBy = tag;\n                    results = $filter('cnFilter')(results, filterBy);\n                  }\n                  addTags(times)(results);\n                } else if (!options.tagsInput.addFromAutocompleteOnly) {\n                  var _tagsInput$addTag;\n\n                  tagsInput.addTag((_tagsInput$addTag = {}, _defineProperty(_tagsInput$addTag, options.tagsInput.displayProperty, tag), _defineProperty(_tagsInput$addTag, options.tagsInput.valueProperty, tag), _tagsInput$addTag));\n                }\n              } else if (results.then) {\n                results.then(addTags(times));\n              }\n            }\n          });\n        });\n\n        tagsInput.on('input-change', function (value) {\n          if (value || !options.minLength) {\n            suggestionList.load(value, tagsInput.getTags());\n          } else {\n            suggestionList.reset();\n          }\n        }).on('input-focus', function (value) {\n          if (!suggestionList.visible && !options.minLength) {\n            suggestionList.load(value, tagsInput.getTags());\n          }\n        }).on('input-keydown', function (e) {\n          var key, handled;\n\n          if (hotkeys.indexOf(e.keyCode) === -1) {\n            return;\n          }\n\n          // This hack is needed because jqLite doesn't implement stopImmediatePropagation properly.\n          // I've sent a PR to Angular addressing this issue and hopefully it'll be fixed soon.\n          // https://github.com/angular/angular.js/pull/4833\n          var immediatePropagationStopped = false;\n          e.stopImmediatePropagation = function () {\n            immediatePropagationStopped = true;\n            e.stopPropagation();\n          };\n          e.isImmediatePropagationStopped = function () {\n            return immediatePropagationStopped;\n          };\n\n          if (suggestionList.visible) {\n            key = e.keyCode;\n            handled = false;\n\n            if (key === KEYS.down) {\n              suggestionList.selectNext();\n              handled = true;\n            } else if (key === KEYS.up) {\n              suggestionList.selectPrior();\n              handled = true;\n            } else if (key === KEYS.escape) {\n              suggestionList.reset();\n              handled = true;\n            } else if (key === KEYS.enter) {\n              handled = scope.addSuggestion(e);\n            }\n\n            if (handled) {\n              e.preventDefault();\n              e.stopImmediatePropagation();\n              scope.$apply();\n            }\n          }\n        }).on('input-blur', function (e) {\n          //changed to use document click or focus, as this fires too soon and cancels\n          //automcomplete click events\n          suggestionList.reset();\n        });\n\n        documentClick = function documentClick(e) {\n          if (e.isDefaultPrevented()) return;\n\n          if (suggestionList.visible) {\n            // if autocomplete option was selected, or click/focus triggered outside of directive\n            if (($(e.target).closest('.suggestion').length || !$(e.target).closest(element[0]).length) && !(e.type === 'blur' && !/^(input|select|textarea|button|a)$/i.test(e.target.tagName))) {\n              suggestionList.reset();\n              if (!/apply|digest/.test(scope.$root.$$phase)) scope.$apply();\n            }\n          }\n        };\n\n        $document.on('click', documentClick).on('blur', documentClick);\n\n        scope.$on('$destroy', function () {\n          $document.off('click', documentClick).off('blur', documentClick);\n\n          empty(tagsInput);\n          tagsInput = null;\n\n          empty(options);\n          options = null;\n        });\n      }\n    };\n  }]);\n\n  /**\n   * @ngdoc directive\n   * @name tiTranscludeAppend\n   * @module cnTagsInput\n   *\n   * @description\n   * Re-creates the old behavior of ng-transclude. Used internally by tagsInput directive.\n   */\n  tagsInput.directive('tiTranscludeAppend', function () {\n    return function (scope, element, attrs, ctrl, transcludeFn) {\n      transcludeFn(function (clone) {\n        element.append(clone);\n      });\n    };\n  });\n\n  /**\n   * @ngdoc directive\n   * @name tiAutosize\n   * @module cnTagsInput\n   *\n   * @description\n   * Automatically sets the input's width so its content is always visible. Used internally by tagsInput directive.\n   */\n  tagsInput.directive('tiAutosize', function () {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function link(scope, element, attrs, ctrl) {\n        var THRESHOLD = 3,\n            span,\n            resize;\n\n        span = angular.element('<span class=\"input\"></span>');\n        span.css('display', 'none').css('visibility', 'hidden').css('width', 'auto').css('white-space', 'pre');\n\n        element.parent().append(span);\n\n        resize = function resize(originalValue) {\n          var value = originalValue,\n              width;\n\n          if (angular.isString(value) && value.length === 0) {\n            value = attrs.placeholder;\n          }\n\n          if (value) {\n            span.text(value);\n            span.css('display', '');\n            width = span.prop('offsetWidth');\n            span.css('display', 'none');\n          }\n\n          element.css('width', width ? width + THRESHOLD + 'px' : '');\n\n          return originalValue;\n        };\n\n        ctrl.$parsers.unshift(resize);\n        ctrl.$formatters.unshift(resize);\n\n        attrs.$observe('placeholder', function (value) {\n          if (!ctrl.$modelValue) {\n            resize(value);\n          }\n        });\n      }\n    };\n  });\n\n  /**\n   * @ngdoc service\n   * @name tagsInputConfig\n   * @module cnTagsInput\n   *\n   * @description\n   * Sets global configuration settings for both tagsInput and autoComplete directives. It's also used internally to parse and\n   * initialize options from HTML attributes.\n   */\n  tagsInput.provider('tagsInputConfig', function () {\n    var globalDefaults = {},\n        interpolationStatus = {};\n\n    /**\n     * @ngdoc method\n     * @name setDefaults\n     * @description Sets the default configuration option for a directive.\n     * @methodOf tagsInputConfig\n     *\n     * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput' or 'autoComplete'.\n     * @param {object} defaults Object containing options and their values.\n     *\n     * @returns {object} The service itself for chaining purposes.\n     */\n    this.setDefaults = function (directive, defaults) {\n      globalDefaults[directive] = defaults;\n      return this;\n    };\n\n    /***\n     * @ngdoc method\n     * @name setActiveInterpolation\n     * @description Sets active interpolation for a set of options.\n     * @methodOf tagsInputConfig\n     *\n     * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput' or 'autoComplete'.\n     * @param {object} options Object containing which options should have interpolation turned on at all times.\n     *\n     * @returns {object} The service itself for chaining purposes.\n     */\n    this.setActiveInterpolation = function (directive, options) {\n      interpolationStatus[directive] = options;\n      return this;\n    };\n\n    this.$get = [\"$interpolate\", function ($interpolate) {\n      var converters = {};\n      converters[String] = function (value) {\n        return value;\n      };\n      converters[Number] = function (value) {\n        return parseInt(value, 10);\n      };\n      converters[Boolean] = function (value) {\n        return value.toLowerCase() === 'true';\n      };\n      converters[RegExp] = function (value) {\n        return new RegExp(value);\n      };\n      converters[Object] = function (value) {\n        return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? value : Object(value);\n      };\n\n      return {\n        load: function load(directive, scope, attrs, options) {\n          scope.options = {};\n          scope.attrs = attrs;\n          scope.uid = _.uniqueId();\n\n          angular.forEach(options, function (value, key) {\n            var type, localDefault, converter, getDefault, updateValue;\n\n            type = value[0];\n            localDefault = value[1];\n            converter = converters[type];\n\n            getDefault = function getDefault() {\n              var globalValue = globalDefaults[directive] && globalDefaults[directive][key];\n              return angular.isDefined(globalValue) ? globalValue : localDefault;\n            };\n\n            updateValue = function updateValue(value) {\n              scope.options[key] = value ? converter(value) : getDefault();\n            };\n\n            if (scope[key]) {\n              updateValue(scope[key]);\n            } else if (interpolationStatus[directive] && interpolationStatus[directive][key]) {\n              attrs.$observe(key, function (value) {\n                updateValue(value);\n              });\n            } else {\n              updateValue(attrs[key] && $interpolate(attrs[key])(scope.$parent));\n            }\n          });\n        }\n      };\n    }];\n  });\n\n  /* HTML templates */\n  tagsInput.run([\"$templateCache\", function ($templateCache) {\n    $templateCache.put('cnTagsInput/tags-input.html', '\\n        <ul class=\"list-group cn-autocomplete-list\"\\n            ng-if=\"options.tagsStyle === \\'list\\' && tagList.items.length && !options.hideTags\">\\n          <li class=\"list-group-item {{options.tagClass}}\"\\n              ng-repeat=\"tag in tagList.items\"\\n              ng-class=\"{ selected: tag == tagList.selected }\">\\n            <button ng-if=\"!ngDisabled\"\\n                    ng-click=\"tagList.remove($index)\"\\n                    type=\"button\" class=\"close pull-right\">\\n              <span>&times;</span>\\n            </button>\\n            <span class=\"tag-item\" ng-bind-html=\"getDisplayHtml(tag)\"/>\\n          </li>\\n        </ul>\\n        <div class=\"host clearfix\"\\n             ng-hide=\"showBulk\"\\n             ti-transclude-append=\"\">\\n          <!-- hack to avoid browser\\'s autocomplete -->\\n          <input class=\"offscreen\"\\n                 id=\"fake-{{attrs.id && attrs.id}}-input\"\\n                 name=\"fake-{{attrs.id && attrs.id}}-input\">\\n          <!-- end hack to avoid browser\\'s autocomplete -->\\n          <div class=\"input form-control tags\"\\n               ng-class=\"{focused: hasFocus}\"\\n               ng-disabled=\"ngDisabled\">\\n            <input class=\"input\"\\n                   ng-disabled=\"ngDisabled\"\\n                   id=\"{{attrs.inputId || attrs.id && attrs.id + \\'-input-\\' + uid}}\"\\n                   name=\"{{attrs.inputId || attrs.id && attrs.id + \\'-input-\\' + uid}}\"\\n                   placeholder=\"{{options.placeholder}}\"\\n                   tabindex=\"{{options.tabindex}}\"\\n                   ng-model=\"newTag.text\"\\n                   ng-model-options=\"{updateOn: \\'default\\'}\"\\n                   ng-change=\"newTagChange()\"\\n                   ng-trim=\"false\"\\n                   ng-class=\"{\\n                      \\'invalid-tag\\': newTag.invalid,\\n                      \\'hide-below\\': options.maxTags === 1 && tagList.items.length\\n                   }\"\\n                   ti-autosize=\"\"\\n                   autocomplete=\"off\">\\n            <span class=\"tag-item label {{options.tagClass}} label-block\"\\n                  ng-if=\"options.tagsStyle !== \\'list\\' && !options.hideTags && options.maxTags === 1 && tagList.items.length\"\\n                  title=\"{{getDisplayText(tagList.items[0])}}\">\\n              <span ng-bind-html=\"getDisplayHtml(tagList.items[0])\"/>\\n              <a class=\"remove-button\"\\n                 ng-if=\"!ngDisabled && !options.dropdownIcon\"\\n                 ng-click=\"tagList.remove()\">\\n                <span>&times;</span>\\n              </a>\\n            </span>\\n            <ul class=\"tag-list\"\\n                ng-if=\"options.tagsStyle !== \\'list\\' && !options.hideTags && options.maxTags !== 1\">\\n              <li class=\"tag-item label {{options.tagClass}}\"\\n                  ng-repeat=\"tag in tagList.items\"\\n                  ng-class=\"{ selected: tag == tagList.selected }\">\\n                <span ng-bind-html=\"getDisplayHtml(tag)\"/>\\n                <a class=\"remove-button\"\\n                   ng-if=\"!ngDisabled\"\\n                   ng-click=\"tagList.remove($index)\">\\n                  <span>&times;</span>\\n                </a>\\n              </li>\\n            </ul>\\n            <button ng-if=\"options.showButton && options.dropdownIcon\"\\n                    class=\"btn form-control-icon\" ng-disabled=\"ngDisabled\" tabindex=\"-1\">\\n              <i class=\"{{options.dropdownStyle}}\"></i>\\n            </button>\\n          </div>\\n        </div>\\n        <div class=\"help-block\">\\n          <button\\n            class=\"btn btn-default btn-xs\"\\n            ng-show=\"options.allowBulk && !showBulk\"\\n            ng-click=\"showBulk = true\"\\n          > Batch\\n          </button>\\n          <button\\n            class=\"btn btn-default btn-xs\"\\n            ng-show=\"options.showClearAll && tagList.items.length\"\\n            ng-click=\"tagList.removeAll()\"\\n          > Clear\\n          </button>\\n          <button\\n            class=\"btn btn-default btn-xs\"\\n            ng-show=\"options.showClearCache && tagList.suggestionList\"\\n            ng-click=\"tagList.suggestionList.clearCache($event, newTag.text)\"\\n          > <i class=\"fa fa-repeat\"/> Update Data\\n          </button>\\n        </div>\\n        <div ng-show=\"showBulk\" class=\"clearfix\">\\n          <textarea class=\"form-control\" ng-model=\"bulkTags\" ng-model-options=\"{\\'updateOn\\': \\'input\\'}\" placeholder=\"{{options.bulkPlaceholder}}\"></textarea>\\n          <p class=\"help-block\">\\n            Press \"Enter\" to submit, \"Shift+Enter\" to add a new line\\n          </p>\\n          <p class=\"help-block\">\\n            Add multiple with brackets, eg. \"citizennet[10]\"\\n          </p>\\n          <div class=\"btn-group help-block\">\\n            <button class=\"btn btn-default btn-xs\" ng-click=\"showBulk = false\">Cancel</button>\\n          </div>\\n        </div>');\n\n    $templateCache.put('cnTagsInput/auto-complete.html', '\\n        <div ng-if=\"!suggestionList.items.length && !options.groupBy\"\\n             ng-class=\"{open: suggestionList.visible}\">\\n          <ul class=\"autocomplete dropdown-menu\">\\n            <li class=\"dropdown-header\" ng-bind-html=\"suggestionList.visible && noResultsMessage(suggestionList)\"></li>\\n          </ul>\\n        </div>\\n        <div ng-if=\"suggestionList.items.length && isGroups\"\\n             ng-class=\"{open: suggestionList.visible}\">\\n          <ul class=\"autocomplete dropdown-menu\">\\n            <li ng-if=\"!suggestionList.items[0].items.length && !suggestionList.items[1].items.length\" class=\"dropdown-header\">No results...</li>\\n            <li ng-repeat-start=\"group in suggestionList.items\"></li>\\n            <li class=\"dropdown-header\" ng-show=\"group.items.length\">{{group.label | titleCase}}</li>\\n            <li ng-repeat=\"item in group.items\"\\n                class=\"suggestion\"\\n                ng-class=\"{selected: item == suggestionList.selected, disabled: item.disabled}\"\\n                ng-click=\"addSuggestion($event)\"\\n                ng-mouseenter=\"suggestionList.select(group.indexes[$index])\"\\n                ng-bind-html=\"highlight(item, group.label)\">\\n            </li>\\n            <li class=\"divider\" ng-show=\"!$last && $parent.suggestionList.items[$index+1].items.length\"></li>\\n            <li ng-repeat-end></li>\\n          </ul>\\n        </div>\\n        <div ng-if=\"suggestionList.items.length && !isGroups && !options.groupBy\"\\n             ng-class=\"{open: suggestionList.visible}\">\\n          <ul class=\"autocomplete dropdown-menu\">\\n            <li ng-repeat=\"item in suggestionList.items\"\\n                class=\"suggestion\"\\n                ng-class=\"{selected: item == suggestionList.selected, disabled: item.disabled}\"\\n                ng-click=\"addSuggestion($event)\"\\n                ng-mouseenter=\"suggestionList.select($index)\"\\n                ng-bind-html=\"highlight(item)\">\\n            </li>\\n          </ul>\\n        </div>\\n        <div ng-if=\"!isGroups && options.groupBy\"\\n             ng-class=\"{open: suggestionList.visible}\">\\n          <ul class=\"autocomplete dropdown-menu\">\\n            <li ng-repeat-start=\"(group, items) in suggestionList.items\"></li>\\n            <li class=\"dropdown-header\" ng-show=\"items.length\">{{group | titleCase}}</li>\\n            <li ng-repeat=\"item in items\"\\n                class=\"suggestion\"\\n                ng-class=\"{selected: item == suggestionList.selected, disabled: item.disabled}\"\\n                ng-click=\"addSuggestion($event)\"\\n                ng-mouseenter=\"suggestionList.select(suggestionList.items[group].indexes[$index])\"\\n                ng-bind-html=\"highlight(item)\">\\n            </li>\\n            <li class=\"divider\" ng-show=\"!$last && items.length\"></li>\\n            <li ng-repeat-end></li>\\n          </ul>\\n        </div>');\n  }]);\n})();","/*!;\n  tagsInput = null;\n * ngTagsInput v2.0.1\n * http://mbenford.github.io/ngTagsInput\n *\n * Copyright (c) 2013-2014 Michael Benford\n * License: MIT\n *\n * Generated at 2014-04-13 21:25:38 -0300\n */\n(function() {\n  'use strict';\n\n  var KEYS = {\n    backspace: 8,\n    tab: 9,\n    enter: 13,\n    escape: 27,\n    space: 32,\n    up: 38,\n    down: 40,\n    comma: 188\n  };\n\n  function empty(obj) {\n    _.forOwn(obj, function(_value, key, coll) {\n      _.set(coll, key, null);\n    });\n  }\n\n  function SimplePubSub() {\n    var events = {};\n    return {\n      on: function(names, handler) {\n        names.split(' ').forEach(function(name) {\n          if(!events[name]) {\n            events[name] = [];\n          }\n          events[name].push(handler);\n        });\n        return this;\n      },\n      trigger: function(name, args) {\n        angular.forEach(events[name], function(handler) {\n          handler.call(null, args);\n        });\n        return this;\n      },\n      destroy: function() {\n        empty(events);\n        events = null;\n      }\n    };\n  }\n\n  function makeObjectArray(array, key, key2) {\n    array = array || [];\n    if(array.length > 0 && !angular.isObject(array[0])) {\n      array.forEach(function(item, index) {\n        array[index] = {\n          [key]: item\n        };\n        if(key2) array[index][key2] = item;\n      });\n    }\n    return array;\n  }\n\n  function getArrayModelVal(array, options) {\n    if(options.arrayValueType === 'object') {\n      return (array || []).map(item => _.isObject(item && item[options.valueProperty]) ? item[options.valueProperty] : item);\n    }\n    else {\n      return _.pluck(array, options.valueProperty);\n    }\n  }\n\n  function findInObjectArray(array, obj, key) {\n    var item = null;\n    var i = 0;\n    var l = array.length;\n\n    if(_.isFunction(key)) {\n      var objVal = key(obj);\n      if(!objVal) return null;\n      for(; i < l; i++) {\n        if(objVal === key(array[i])) {\n          item = array[i];\n          break;\n        }\n      }\n    }\n    else {\n      for(; i < l; i++) {\n        // I'm aware of the internationalization issues regarding toLowerCase()\n        // but I couldn't come up with a better solution right now\n        if(_.has(obj, key) &&\n            _.has(array[i], key) &&\n            (angular.toJson(array[i][key]) + '').toLowerCase() === (angular.toJson(obj[key]) + '').toLowerCase()) {\n          item = array[i];\n          break;\n        }\n      }\n    }\n    return item;\n  }\n\n  function replaceAll(str, substr, newSubstr) {\n    var expression = substr.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n    return str.replace(new RegExp(expression, 'gi'), newSubstr);\n  }\n\n  function matchTagsWithModel(tags, model, options) {\n    if(!model || !tags || !tags.length) return false;\n\n    if(!_.isArray(model)) {\n      return angular.equals(model, tags[0][options.valueProperty]) || angular.equals(model, tags[0]);\n    }\n\n    let array = getArrayModelVal(tags, options);\n    return array.some((tag, i) => {\n      return angular.equals(model[i], tag) || angular.equals(model[i], tag[options.valueProperty]);\n    });\n  }\n\n  function findTagsForValue(tags, value, options) {\n    return tags.filter(function(tag) {\n      return tag[options.valueProperty] === value;\n    });\n  }\n\n  function selectAll(input) {\n    if(input.value) {\n      input.setSelectionRange(0, input.value.length);\n    }\n  }\n\n  var tagsInput = angular.module('cnTagsInput', []);\n\n  /**\n   * @ngdoc directive\n   * @name tagsInput\n   * @module cnTagsInput\n   *\n   * @description\n   * Renders an input box with tag editing support.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} [displayProperty=text] Property to be rendered as the tag label.\n   * @param {string=} [valueProperty=value] Property to be used as the value when modelType is not array/object.\n   * @param {number=} tabindex Tab order of the control.\n   * @param {string=} [placeholder=Add a tag] Placeholder text for the control.\n   * @param {number=} [minLength=3] Minimum length for a new tag.\n   * @param {number=} maxLength Maximum length allowed for a new tag.\n   * @param {boolean=} required Sets required validation error key.\n   * @param {number=} minTags Sets minTags validation error key if the number of tags added is less than minTags.\n   * @param {number=} maxTags Sets maxTags validation error key if the number of tags added is greater than maxTags.\n   * @param {boolean=} [allowLeftoverText=false] Sets leftoverText validation error key if there is any leftover text in\n   *                                             the input element when the directive loses focus.\n   * @param {string=} [removeTagSymbol=×] Symbol character for the remove tag button.\n   * @param {boolean=} [addOnEnter=true] Flag indicating that a new tag will be added on pressing the ENTER key.\n   * @param {boolean=} [addOnSpace=false] Flag indicating that a new tag will be added on pressing the SPACE key.\n   * @param {boolean=} [addOnComma=true] Flag indicating that a new tag will be added on pressing the COMMA key.\n   * @param {boolean=} [addOnBlur=false] Flag indicating that a new tag will be added when the input field loses focus.\n   * @param {boolean=} [clearOnBlur=false] Flag indicating whether to clear the typed text when the input field loses focus.\n   * @param {boolean=} [replaceSpacesWithDashes=false] Flag indicating that spaces will be replaced with dashes.\n   * @param {string=} [allowedTagsPattern=.+] Regular expression that determines whether a new tag is valid.\n   * @param {boolean=} [enableEditingLastTag=false] Flag indicating that the last tag will be moved back into\n   *                                                the new tag input box instead of being removed when the backspace key\n   *                                                is pressed and the input box is empty.\n   * @param {boolean=} [addFromAutocompleteOnly=false] Flag indicating that only tags coming from the autocomplete list will be allowed.\n   *                                                   When this flag is true, addOnEnter, addOnComma, addOnSpace, addOnBlur and\n   *                                                   allowLeftoverText values are ignored.\n   * @param {expression} onBeforeTagAdded Expression to evaluate upon adding a new tag. The new tag is available as $tag.\n   * @param {expression} onBeforeTagRemoved Expression to evaluate upon removing an existing tag. The removed tag is available as $tag.\n   * @param {expression} onBeforeTagChanged Expression to evaluate upon adding or removing a tag. The affected tag is available as $tag. Prev value avialble as $prev.\n   * @param {expression} onTagAdded Expression to evaluate upon adding a new tag. The new tag is available as $tag.\n   * @param {expression} onTagRemoved Expression to evaluate upon removing an existing tag. The removed tag is available as $tag.\n   * @param {expression} onTagChanged Expression to evaluate upon adding or removing a tag. The affected tag is available as $tag. Prev value avialble as $prev.\n   * @param {expression} onInit Expression to evaluate upon initializing model value.\n   * @param {string} modelType Defines ngModel type, if anything other than array, model is set to first tag in list\n   * @param {string} arrayValueType Defines ngModel[] type, if anything other than object, value is set mapped from object's values\n   * @param {boolean=} [hideTags=false] Flag indicating whether to hide tag list (for manually displaying tag list in other way)\n   * @param {boolean=} [dropdownIcon=false] Flag to show icon on right side\n   * @param {string=} [tagsStyle='tags'] Default tags style\n   */\n  tagsInput.directive('tagsInput', [\n    \"$timeout\", \"$document\", \"tagsInputConfig\", \"$sce\", \"$rootScope\",\n    function($timeout, $document, tagsInputConfig, $sce, $rootScope) {\n      function TagList(options, events) {\n        var self = {}, getTagText, setTagText, tagIsValid;\n\n        getTagText = options.getTagText = function(tag) {\n          if(!_.isObject(tag)) return tag;\n          return options.itemFormatter ? options.itemFormatter(tag) : tag[options.displayProperty];\n        };\n\n        setTagText = function(tag, text) {\n          // only create tag object when not adding from auto-complete\n          if(tag[options.displayProperty]) return;\n\n          tag[options.displayProperty] = text;\n          if(options.valueProperty && !_.has(tag, options.valueProperty)) {\n            tag[options.valueProperty] = text;\n          }\n        };\n\n        tagIsValid = function(tag) {\n          var tagText = getTagText(tag) + '';\n\n          return (!options.minLength || tagText.length >= options.minLength) &&\n                 (!options.maxLength || tagText.length <= options.maxLength) &&\n                 options.allowedTagsPattern.test(tagText) &&\n                 !findInObjectArray(\n                     self.items,\n                     tag,\n                     options.valueProperty || getTagText\n                 );\n        };\n\n        self.items = [];\n\n        self.addText = function(text) {\n          var tag = {};\n          setTagText(tag, text);\n          self.add(tag);\n        };\n\n        self.add = function(tag) {\n          if(tag.disabled) return;\n\n          var tagText = getTagText(tag);\n\n          if(tagText.trim) tagText = tagText.trim();\n\n          if(options.replaceSpacesWithDashes) {\n            tagText = tagText.replace(/\\s/g, '-');\n          }\n\n          setTagText(tag, tagText);\n\n          if(tagIsValid(tag)) {\n            if(options.maxTags && self.items.length >= options.maxTags) {\n              self.items.pop();\n              events.trigger('tag-removed', {$tag: tag, $event: 'tag-removed'});\n            }\n            self.items.push(tag);\n            events.trigger('tag-added', {$tag: tag, $event: 'tag-added'});\n          }\n          else {\n            events.trigger('invalid-tag', {$tag: tag, $event: 'invalid-tag'});\n          }\n\n          return tag;\n        };\n\n        self.remove = function(index) {\n          var tag = self.items.splice(index, 1)[0];\n          events.trigger('tag-removed', {$tag: tag, $event: 'tag-removed'});\n          return tag;\n        };\n\n        self.removeLast = function() {\n          var tag, lastTagIndex = self.items.length - 1;\n\n          if(options.enableEditingLastTag || self.selected) {\n            self.selected = null;\n            tag = self.remove(lastTagIndex);\n          }\n          else if(!self.selected) {\n            self.selected = self.items[lastTagIndex];\n          }\n\n          return tag;\n        };\n\n        self.removeAll = function() {\n          var tags = self.items.splice(0, self.items.length);\n          tags.forEach(function(tag) {\n            events.trigger('tag-removed', {$tag: tag, $event: 'tag-removed'});\n          });\n        };\n\n        self.destroy = function() {\n          empty(self);\n          self = null;\n        };\n\n        return self;\n      }\n\n      return {\n        restrict: 'E',\n        require: 'ngModel',\n        scope: {\n          tags: '=ngModel',\n          itemFormatter: '=',\n          ngDisabled: '=',\n          onBeforeTagAdded: '&',\n          onBeforeTagRemoved: '&',\n          onBeforeTagChanged: '&',\n          onTagAdded: '&',\n          onTagRemoved: '&',\n          onTagChanged: '&',\n          onInit: '&',\n          newTag: '=?'\n        },\n        replace: false,\n        transclude: true,\n        templateUrl: 'cnTagsInput/tags-input.html',\n        controller: [\"$scope\", \"$attrs\", \"$element\", function($scope, $attrs, $element) {\n          tagsInputConfig.load('tagsInput', $scope, $attrs, {\n            placeholder: [String, ''],\n            tabindex: [Number],\n            removeTagSymbol: [String, String.fromCharCode(215)],\n            replaceSpacesWithDashes: [Boolean, false],\n            minLength: [Number, 2],\n            maxLength: [Number],\n            addOnEnter: [Boolean, true],\n            addOnSpace: [Boolean, false],\n            addOnComma: [Boolean, true],\n            addOnBlur: [Boolean, false],\n            clearOnBlur: [Boolean, false],\n            allowedTagsPattern: [RegExp, /.+/],\n            enableEditingLastTag: [Boolean, false],\n            required: [Boolean, false],\n            minTags: [Number],\n            maxTags: [Number],\n            displayProperty: [String, 'text'],\n            valueProperty: [String],\n            allowLeftoverText: [Boolean, false],\n            addFromAutocompleteOnly: [Boolean, false],\n            tagClass: [String, ''],\n            modelType: [String, 'array'],\n            arrayValueType: [String, 'object'],\n            hideTags: [Boolean, false],\n            dropdownIcon: [Boolean, false],\n            tagsStyle: [String, 'tags'],\n            allowBulk: [Boolean, false],\n            bulkDelimiter: [RegExp, /, ?|\\n/],\n            bulkPlaceholder: [String, 'Enter a list separated by commas or new lines'],\n            showClearAll: [Boolean, false],\n            showClearCache: [Boolean, false],\n            showButton: [Boolean, false]\n          });\n\n          var options = $scope.options;\n          var input = options.input = $element.find('input.input');\n\n          function handleKeydown(e) {\n            $scope.events.trigger('input-keydown', e);\n          }\n\n          input.on('keydown', handleKeydown);\n\n          $scope.$on('$destroy', function() {\n            input.off('keydown', handleKeydown);\n            input = null;\n            empty(options);\n            options = null;\n            $scope.events.destroy();\n            $scope.tagList.destroy();\n            $scope.processBulk = null;\n          });\n\n          if(!options.valueProperty &&\n              (!/object|array/.test(options.modelType) || options.arrayValueType !== 'object')) {\n            options.valueProperty = 'value';\n          }\n\n          if($scope.itemFormatter) options.itemFormatter = $scope.itemFormatter;\n\n          if(options.tagsStyle === 'tags') {\n            options.tagClass = options.tagClass || 'label-primary';\n          }\n\n          if(options.allowBulk && (options.modelType !== 'array' || options.maxTags === 1)) {\n            options.allowBulk = false;\n          }\n\n          $scope.events = new SimplePubSub();\n          $scope.tagList = new TagList(options, $scope.events);\n\n          this.registerAutocomplete = function() {\n            return {\n              addTag: function(tag) {\n                return $scope.tagList.add(tag);\n              },\n              focusInput: function() {\n                input[0].focus();\n              },\n              blurInput: function() {\n                input[0].blur();\n              },\n              getTags: function() {\n                return $scope.tagList.items;\n              },\n              getModel: function() {\n                return $scope.tags;\n              },\n              getOptions: function() {\n                return options;\n              },\n              on: function(name, handler) {\n                $scope.events.on(name, handler);\n                return this;\n              },\n              registerProcessBulk: function(fn) {\n                $scope.processBulk = function() {\n                  fn($scope.bulkTags).then(function() {\n                    $scope.showBulk = false;\n                    $scope.bulkTags = '';\n                  });\n                };\n              },\n              registerSuggestionList: function(suggestionList) {\n                $scope.tagList.suggestionList = suggestionList;\n              }\n            };\n          };\n        }],\n        link: function(scope, element, attrs, ngModelCtrl) {\n          function tagsInputTag() {}\n          scope.__tag = new tagsInputTag();\n\n          var hotkeys = [KEYS.enter, KEYS.comma, KEYS.space, KEYS.backspace],\n              tagList = scope.tagList,\n              events = scope.events,\n              options = scope.options,\n              input = element.find('input.input'),\n              textarea = element.find('textarea'),\n              div = element.find('div'),\n              blurTimeout;\n\n          if(attrs.inputId && !ngModelCtrl.$name) {\n            ngModelCtrl.$name = attrs.inputId;\n          }\n\n          // before callbacks allow code to modify tag before it's added\n          // after callback fired after ngModel has chance to update\n          function beforeAndAfter(before, after) {\n            return function() {\n              var args = arguments;\n              before.apply(this, args);\n              $timeout(function(){\n                after.apply(this, args);\n              });\n            };\n          }\n\n          events\n            .on('tag-added', beforeAndAfter(scope.onBeforeTagAdded, scope.onTagAdded))\n            .on('tag-removed', beforeAndAfter(scope.onBeforeTagRemoved, scope.onTagRemoved))\n            .on('tag-changed', beforeAndAfter(scope.onBeforeTagChanged, scope.onTagChanged))\n            .on('tag-init', scope.onInit)\n            .on('tag-added tag-removed', function(e) {\n              if(!options.maxTags || options.maxTags > scope.tagList.items.length) {\n                selectAll(options.input[0]);\n              }\n              else {\n                scope.newTag.text = '';\n              }\n              if(options.modelType === 'array') {\n                if(!options.valueProperty) {\n                  scope.tags = scope.tagList.items;\n                }\n                else {\n                  scope.tags = getArrayModelVal(scope.tagList.items, options);\n                }\n              }\n              else {\n                if(e.$event === 'tag-removed') {\n                  scope.tags = undefined;\n                }\n                else {\n                  if(!options.valueProperty) {\n                    scope.tags = e.$tag;\n                  }\n                  else {\n                    scope.tags = _.has(e.$tag, options.valueProperty) ?\n                        e.$tag[options.valueProperty] : e.$tag[options.displayProperty];\n                  }\n                }\n              }\n            })\n            .on('invalid-tag', function() {\n              scope.newTag.invalid = true;\n            })\n            .on('input-change', function() {\n              tagList.selected = null;\n              scope.newTag.invalid = null;\n            })\n            .on('input-focus', function() {\n              ngModelCtrl.$setValidity('leftoverText', true);\n            })\n            .on('input-blur', function() {\n              if(!options.addFromAutocompleteOnly) {\n                if(options.addOnBlur && scope.newTag.text) {\n                  tagList.addText(scope.newTag.text);\n                }\n              }\n\n              // Reset newTag\n              if(options.clearOnBlur) {\n                scope.newTag.text = '';\n                scope.newTag.invalid = null;\n              }\n            });\n\n          scope.newTag = {text: '', invalid: null};\n\n          scope.getDisplayText = scope.itemFormatter || function(tag) {\n            return tag && ((tag[options.displayProperty] || 'undefined') + '').trim();\n          };\n\n          scope.getDisplayHtml = function(tag) {\n            return $sce.trustAsHtml(scope.getDisplayText(tag));\n          };\n\n          scope.track = function(tag) {\n            return tag[options.displayProperty];\n          };\n\n          scope.newTagChange = function() {\n            events.trigger('input-change', scope.newTag.text);\n          };\n\n          scope.processBulk = scope.processBulk || function() {\n            var tags = scope.bulkTags.split(options.bulkDelimiter);\n            _.each(tags, function(text) {\n              var tag = {};\n              tag[options.displayProperty] = text;\n              scope.tagList.add(tag);\n            });\n            scope.showBulk = false;\n            scope.bulkTags = '';\n          };\n\n          var first = true;\n\n          scope.triggerInit = function(value, prev) {\n            var criteria = options.valueProperty ? {[options.valueProperty]: value} : value;\n            if(!tagList.items.length || !_.find(tagList.items, criteria)) {\n              events.trigger('tag-init', {\n                $tag: value,\n                $prev: prev,\n                $event: 'tag-init',\n                $setter: function(val) {\n                  if(val && !_.isObject(val)) {\n                    tagList.items = [{\n                      [options.displayProperty]: val,\n                      [options.valueProperty]: val\n                    }];\n                  }\n                  else {\n                    tagList.items = _.isArray(val) ? val : [val];\n                  }\n                  return tagList.items;\n                }\n              });\n            }\n          };\n\n          scope.$watch('tags', function(value, prev) {\n            var changed = !angular.equals(value, prev);\n            var init    = !changed && first;\n\n            if(init) {\n              scope.triggerInit(value, prev);\n            }\n            if(changed) {\n              events.trigger('tag-changed', {\n                $tag: value,\n                $prev: prev,\n                $event: 'tag-changed'\n              });\n            }\n\n            if(options.modelType === 'array') {\n              if(_.isArray(value)) {\n                if(value.length) {\n                  if(!matchTagsWithModel(tagList.items, scope.tags, options)) {\n                    scope.triggerInit(value, prev);\n                  }\n                  if(!matchTagsWithModel(tagList.items, scope.tags, options) || tagList.items.length !== scope.tags.length) {\n                    tagList.items = makeObjectArray(value, options.displayProperty, options.valueProperty);\n                    scope.tags = getArrayModelVal(tagList.items, options);\n                    return;\n                  }\n                }\n                else {\n                  tagList.items = [];\n                  if(angular.isUndefined(prev)) return;\n                }\n              }\n              else if(value === undefined) {\n                tagList.items = [];\n                scope.tags = [];\n                return;\n              }\n            }\n            else if(angular.isDefined(value)) {\n              if(_.isArray(value)) {\n                if(value.length) {\n                  //if(options.modelType === 'object') {\n                  if(!options.valueProperty) {\n                    scope.tags = value[0];\n                  }\n                  else {\n                    scope.tags = value[0][options.valueProperty];\n                  }\n\n                  return;\n                }\n                else {\n                  scope.tags = undefined;\n                }\n              }\n              else {\n                if(options.modelType === 'object') {\n                  if(value !== null) tagList.items = [value];\n                }\n                else {\n                  if(_.isObject(value)) {\n                    tagList.items = [value];\n\n                    var val = value[options.valueProperty];\n                    if(_.isUndefined(val)) val = value[options.displayProperty];\n                    scope.tags = val;\n\n                    return;\n                  }\n                  else if(!_.isUndefined(value) &&\n                      (!tagList.items.length || tagList.items[0][options.valueProperty] !== value)) {\n                    scope.triggerInit(value, prev);\n                  }\n                }\n              }\n            }\n            else if(!value && tagList.items.length) {\n              tagList.items = [];\n            }\n\n            if(!init && changed) {\n              ngModelCtrl.$setDirty();\n            }\n\n            // hack because schemaForm is incorrectly invalidating model sometimes\n            ngModelCtrl.$setValidity('schemaForm', true);\n            if(options.modelType === 'array') {\n              ngModelCtrl.$setValidity('tv4-401', value && options.maxTags ? value.length <= options.maxTags : true);\n              ngModelCtrl.$setValidity('tv4-302', value ? angular.isDefined(options.minTags) ? value.length >= options.minTags : true : false);\n            }\n            else {\n              ngModelCtrl.$setValidity('tv4-302', !options.required || !(angular.isUndefined(value)));\n            }\n\n            first = false;\n\n          }, true);\n\n          function handleInputKeydown(e) {\n            // This hack is needed because jqLite doesn't implement stopImmediatePropagation properly.\n            // I've sent a PR to Angular addressing this issue and hopefully it'll be fixed soon.\n            // https://github.com/angular/angular.js/pull/4833\n            if(e.isImmediatePropagationStopped && e.isImmediatePropagationStopped()) {\n              return;\n            }\n\n            var key = e.keyCode,\n                isModifier = e.shiftKey || e.altKey || e.ctrlKey || e.metaKey,\n                addKeys = {},\n                shouldAdd, shouldRemove;\n\n            if(isModifier || hotkeys.indexOf(key) === -1) {\n              return;\n            }\n\n            addKeys[KEYS.enter] = options.addOnEnter;\n            addKeys[KEYS.comma] = options.addOnComma;\n            addKeys[KEYS.space] = options.addOnSpace;\n\n            shouldAdd = !options.addFromAutocompleteOnly && addKeys[key];\n            shouldRemove = !shouldAdd && key === KEYS.backspace && scope.newTag.text.length === 0;\n\n            if(shouldAdd) {\n              tagList.addText(scope.newTag.text);\n\n              scope.$apply();\n              e.preventDefault();\n            }\n            else if(shouldRemove) {\n              var tag = tagList.removeLast();\n              if(tag && options.enableEditingLastTag) {\n                scope.newTag.text = tag[options.displayProperty];\n              }\n\n              scope.$apply();\n              e.preventDefault();\n            }\n          }\n\n          function handleInputBlur(e) {\n            blurTimeout = $timeout(function() {\n              // race condition can cause input to be destroyed before timeout ends\n              if(!input) return false;\n              var activeElement = $document.prop('activeElement'),\n                  lostFocusToBrowserWindow = activeElement === input[0],\n                  lostFocusToChildElement = element.find('.host')[0].contains(activeElement);\n\n              if(lostFocusToBrowserWindow || !lostFocusToChildElement) {\n                scope.hasFocus = false;\n                events.trigger('input-blur', e);\n              }\n            }, 150); // timeout so that click event triggers first\n          }\n\n          function handleInputFocus(e) {\n            if(e) e.preventDefault();\n            if(scope.ngDisabled) return;\n\n            selectAll(e.target);\n\n            if(blurTimeout) $timeout.cancel(blurTimeout);\n\n            scope.hasFocus = true;\n            events.trigger('input-focus', input.val());\n\n            if(!/apply|digest/.test(scope.$root.$$phase)) scope.$apply();\n          }\n\n          function handleTextareaKeydown(e) {\n            if(e.keyCode === KEYS.enter) {\n              if(!e.altKey && !e.ctrlKey && !e.metaKey && !e.shiftKey) {\n                e.preventDefault();\n                scope.processBulk();\n              }\n            }\n          }\n\n          function handleDivClick(e) {\n            var $target = $(e.target);\n            if(!$target.closest('.suggestion').length &&\n               // we don't want any of the buttons underneath to trigger\n               !$target.parent().hasClass('help-block')) {\n              e.preventDefault();\n              input[0].focus();\n            }\n          }\n\n          // stupid ugly hack to fix order between input and autocomplete events\n          let uglyHackTimeout = $timeout(function() {\n            input\n              .on('keydown', handleInputKeydown)\n              .on('focus', handleInputFocus)\n              .on('blur', handleInputBlur);\n          });\n\n          textarea.on('keydown', handleTextareaKeydown);\n\n          div.on('click', handleDivClick);\n\n          scope.$on('$destroy', function() {\n            input\n              .off('keydown', handleInputKeydown)\n              .off('focus', handleInputFocus)\n              .off('blur', handleInputBlur);\n\n            textarea.off('keydown', handleTextareaKeydown);\n            div.off('click', handleDivClick);\n            input = null;\n            textarea = null;\n            div = null;\n            events.destroy();\n            events = null;\n            first = null;\n            hotkeys = null;\n            options = null;\n            tagList = null;\n            $timeout.cancel(uglyHackTimeout);\n          });\n        }\n      };\n    }]);\n\n  /**\n   * @ngdoc directive\n   * @name autoComplete\n   * @module cnTagsInput\n   *\n   * @description\n   * Provides autocomplete support for the tagsInput directive.\n   *\n   * @param {expression} source Expression to evaluate upon changing the input content. The input value is available as\n   *                            $query. The result of the expression must be a promise that eventually resolves to an\n   *                            array of strings.\n   * @param {number=} [debounceDelay=100] Amount of time, in milliseconds, to wait before evaluating the expression in\n   *                                      the source option after the last keystroke.\n   * @param {number=} [minLength=3] Minimum number of characters that must be entered before evaluating the expression\n   *                                 in the source option.\n   * @param {boolean=} [highlightMatchedText=true] Flag indicating that the matched text will be highlighted in the\n   *                                               suggestions list.\n   * @param {number=} [maxResultsToShow=10] Maximum number of results to be displayed at a time.\n   */\n  tagsInput.directive('autoComplete', [\n    \"$document\", \"$timeout\", \"$filter\", \"$sce\", \"tagsInputConfig\", \"$parse\", 'Api', '$q',\n    function($document, $timeout, $filter, $sce, tagsInputConfig, $parse, Api, $q) {\n      function SuggestionList(scope, options) {\n        var self = {}, debouncedLoadId, getDifference, lastPromise, groupList,\n            splitListItems, formatItemText, mapIndexes;\n\n        groupList = function(list, groupBy) {\n          var filtered = {},\n              map = [],\n              index = 0,\n              keys;\n\n          // loop through each item in the list\n          _.each(list, function(item) {\n            keys = $parse(groupBy)(item);\n            if(!_.isArray(keys)) keys = [keys];\n            _.each(keys, function(key) {\n              if(!filtered[key]) {\n                filtered[key] = [];\n              }\n              filtered[key].push(item);\n            });\n          });\n\n          _.each(filtered, function(group) {\n            group.indexes = [];\n            _.each(group, function(item) {\n              group.indexes.push(index++);\n              map.push(item);\n            });\n          });\n\n          return {\n            groups: filtered,\n            map: map\n          };\n        };\n\n        formatItemText = function(item, formatter) {\n          if(formatter) {\n            if(!_.isArray(formatter)) {\n              formatter = [formatter, {}];\n            }\n            return $parse(formatter[0])((formatter[1].val = item) && formatter[1]);\n          }\n\n          return item;\n        };\n\n        splitListItems = function(items) {\n          var keys = [];\n\n          function addItem(key, item, group, prop) {\n            var text = _.isObject(item) ? item[prop || options.tagsInput.displayProperty] : item,\n                toAdd = {\n                  text: formatItemText(text, group.formatter),\n                  value: text,\n                  key: key,\n                  childKey: prop/*,\n                  tagClass: options.tagClasses && options.tagClasses[key] || options.tagClass*/\n                };\n\n            if(!_.find(group.items, toAdd)) {\n              group.items.push(toAdd);\n            }\n          }\n\n          _.each(scope.searchKeys, function(group) {\n            var key = group.key;\n            group.items = [];\n\n            _.each(items, function(item) {\n              if(item[key]) {\n                if(_.isArray(item[key])) {\n                  _.each(item[key], function(child) {\n                    addItem(key, child, group, group.childKey);\n                  });\n                }\n                else {\n                  addItem(key, item[key], group, group.childKey);\n                }\n              }\n            });\n            keys.push(group);\n          });\n\n          return keys;\n        };\n\n        mapIndexes = function(items) {\n          var map = [],\n              index = 0;\n\n          _.each(items, function(group) {\n            group.indexes = [];\n            _.each(group.items, function(item) {\n              group.indexes.push(index++);\n              map.push(item);\n            });\n          });\n\n          return map;\n        };\n\n        getDifference = function(array1, array2) {\n          if(!array2.length) {\n            return array1.filter(function(item) {\n              return item[options.tagsInput.displayProperty] !== '';\n            });\n          }\n          return array1.filter(function(item) {\n            return !findInObjectArray(\n                array2,\n                item,\n                options.tagsInput.valueProperty || options.tagsInput.getTagText\n            );\n          });\n        };\n\n        self.reset = function() {\n          lastPromise = null;\n\n          self.items = [];\n          self.visible = false;\n          self.index = -1;\n          self.selected = null;\n          self.query = null;\n\n          $timeout.cancel(debouncedLoadId);\n        };\n\n        self.show = function() {\n          self.selected = null;\n          self.visible = true;\n          self.select(0);\n        };\n\n        self.load = function(query, tags) {\n          if(query.length < options.minLength) {\n            self.reset();\n            return;\n          }\n\n          var promise,\n              //filterBy = {},\n              filterBy = query,\n              groups,\n              processItems = function(items) {\n                if(promise && promise !== lastPromise) {\n                  return;\n                }\n\n                if(scope.searchKeys) {\n                  scope.isGroups = true;\n                  //filterBy = query;\n                  items = splitListItems(items);\n                }\n                if(_.isObject(items) && !_.isArray(items)) {\n                  scope.isGroups = true;\n                  items = _.map(items, function(list, group) {\n                    return {\n                      items: list,\n                      label: group\n                    };\n                  });\n                }\n                if(scope.isGroups) {\n                  _.each(items, function(group) {\n                    group.items = getDifference(group.items, tags);\n                    if(query) group.items = $filter('cnFilter')(group.items, filterBy);\n\n                    group.items = group.items.slice(0, options.maxResultsToShow);\n                  });\n                  self.itemMap = mapIndexes(items);\n                }\n                else {\n                  //filterBy[options.tagsInput.displayProperty] = query;\n                  items = makeObjectArray(items.data || items, options.tagsInput.displayProperty);\n                  items = getDifference(items, tags);\n                  if(query && !options.skipFiltering) {\n                    items = $filter('cnFilter')(items, filterBy);\n                  }\n\n                  items = items.slice(0, options.maxResultsToShow);\n\n                  if(options.groupBy) {\n                    groups = groupList(items, options.groupBy);\n                    items = groups.groups;\n                    self.itemMap = groups.map;\n                  }\n                }\n\n                self.items = items;\n                self.show();\n              };\n\n          $timeout.cancel(debouncedLoadId);\n          self.query = query;\n          debouncedLoadId = $timeout(function() {\n            self._load(query, promise).then(processItems);\n          }, options.minLength ? options.debounceDelay : 0, false);\n        };\n\n        self.clearCache = function(event, query) {\n          event.preventDefault();\n          if(scope._source) scope.source = scope._source;\n          var source = scope.source;\n          source({$query: query, options: { refreshData: true }})\n            .then(function(results) {\n              scope._source = source;\n              scope.source = function() {\n                return results;\n              };\n              scope.tagsInput.focusInput();\n            });\n        }\n\n        self._load = function(query, promise) {\n          var d = $q.defer();\n          var source = scope.source({$query: query});\n          if(_.isArray(source)) {\n            $timeout(function() {\n              d.resolve(source || []);\n            });\n          }\n          else {\n            if(!options.minLength) {\n              // fucking race conditions\n              var _source = scope.source;\n              source.then(function(results) {\n                scope._source = _source;\n                scope.source = function() {\n                  return results;\n                };\n                d.resolve(results || []);\n              });\n            }\n            else {\n              promise = source;\n              lastPromise = promise;\n              return promise;\n            }\n          }\n          return d.promise;\n        };\n\n        self.selectNext = function() {\n          self.select(++self.index);\n        };\n\n        self.selectPrior = function() {\n          self.select(--self.index);\n        };\n\n        self.select = function(index) {\n          var list = self.itemMap || self.items;\n          if(index < 0) {\n            index = list.length - 1;\n          }\n          else if(index >= list.length) {\n            index = 0;\n          }\n          self.index = index;\n          if(self.itemMap) {\n            self.selected = self.itemMap[index];\n          }\n          else {\n            self.selected = self.items[index];\n          }\n        };\n\n        return self;\n      }\n\n      function encodeHTML(value) {\n        return value ? value\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;') : '';\n      }\n\n      return {\n        restrict: 'E',\n        require: '^tagsInput',\n        scope: {\n          source: '&',\n          searchKeys: '=?'\n        },\n        templateUrl: function(elem, attrs) {\n          return attrs.customTemplateUrl || 'cnTagsInput/auto-complete.html';\n        },\n        link: function(scope, element, attrs, tagsInputCtrl) {\n          var hotkeys = [KEYS.enter, KEYS.tab, KEYS.escape, KEYS.up, KEYS.down],\n              suggestionList, tagsInput, options, getItemText, documentClick;\n\n          function autoCompleteTag() {}\n          scope.__tag = new autoCompleteTag();\n\n          tagsInputConfig.load('autoComplete', scope, attrs, {\n            debounceDelay: [Number, 250],\n            minLength: [Number, 3],\n            highlightMatchedText: [Boolean, true],\n            maxResultsToShow: [Number, 75],\n            groupBy: [String, ''],\n            skipFiltering: [Boolean, false]\n          });\n\n          options = scope.options;\n\n          tagsInput = tagsInputCtrl.registerAutocomplete();\n          scope.tagsInput = tagsInput;\n\n          options.tagsInput = tagsInput.getOptions();\n\n          if(options.minLength === 0/* && _.isArray(scope.source())*/) {\n            options.tagsInput.dropdownIcon = true;\n            if(options.tagsInput.maxTags === 1) {\n              options.tagsInput.dropdownStyle = 'caret';\n            }\n            else {\n              options.tagsInput.dropdownStyle = 'fa fa-plus';\n            }\n          }\n          else {\n            options.tagsInput.dropdownStyle = 'fa fa-search';\n          }\n\n          suggestionList = new SuggestionList(scope, options);\n          tagsInput.registerSuggestionList(suggestionList);\n\n          getItemText = options.tagsInput.itemFormatter || function(item) {\n            return String(item[options.tagsInput.displayProperty]);\n          };\n\n          scope.suggestionList = suggestionList;\n\n          var tagsValue = tagsInput.getModel();\n\n          if(options.minLength === 0 && tagsValue && !angular.equals(tagsValue, [])) {\n            suggestionList._load().then(function(results) {\n              var tags = findTagsForValue(results, tagsInput.getModel(), options.tagsInput);\n              var cur = tagsInput.getTags();\n              if(!angular.equals(tags, tagsInput.getTags())) {\n                tagsInput.getTags().length = 0; // hack to get event to retrigger\n                tags.forEach(function(tag) {\n                  tagsInput.addTag(tag);\n                });\n              }\n            });\n          }\n\n          scope.addSuggestion = function(e) {\n            e.preventDefault();\n\n            var added = false;\n\n            if(suggestionList.selected) {\n              tagsInput.addTag(angular.copy(suggestionList.selected));\n\n              if(!options.tagsInput.maxTags || tagsInput.getTags().length < options.tagsInput.maxTags) {\n                var i = suggestionList.items.indexOf(suggestionList.selected);\n                suggestionList.items.splice(i, 1);\n                suggestionList.select(i);\n                tagsInput.focusInput();\n              }\n              else {\n                suggestionList.reset();\n                tagsInput.blurInput();\n              }\n\n              added = true;\n            }\n            return added;\n          };\n\n          scope.highlight = function(item, key) {\n            var text = getItemText(item, key);\n            if(suggestionList.query && options.highlightMatchedText) {\n              text =\n                _(text.match(/(\\<[^>]*>|[^<]*)/g)) // regex will create a list of all html and text nodes\n                .map(s => s.length && s[0] !== '<' ? replaceAll(s, suggestionList.query, '<b>$&</b>') : s)\n                .join('');\n            }\n            return $sce.trustAsHtml('<a>' + text + '</a>');\n          };\n\n          scope.track = function(item, key) {\n            return getItemText(item, key);\n          };\n\n          scope.noResultsMessage = function({visible, query}) {\n            if(!query) return 'No options...';\n            return $sce.trustAsHtml(`No results for <b>${query}</b>...`);\n          };\n\n          tagsInput.registerProcessBulk(function(bulkTags) {\n            var tags = bulkTags.split(options.tagsInput.bulkDelimiter);\n\n            var addTags = function(i) {\n              return function(data) {\n                _.times(i, function(i) {\n                  if(data[i]) tagsInput.addTag(data[i]);\n                });\n              };\n            };\n\n            // in case a query is involved...doesn't hurt to use even if not\n            return Api.batch(function() {\n              for(var i = 0, l = tags.length; i < l; i++) {\n                if(options.tagsInput.maxTags && tagsInput.getTags().length >= options.tagsInput.maxTags) break;\n                var tag = tags[i];\n                var times = 1;\n                var multiple = tags[i].match(/(.*) ?\\[(\\d+)\\]$/);\n\n                if(multiple) {\n                  tag = multiple[1];\n                  times = parseInt(multiple[2]);\n                }\n\n                var results = scope.source({$query: tag});\n\n                if(_.isArray(results)) {\n                  if(results.length) {\n                    if(!options.skipFiltering) {\n                      var filterBy = tag;\n                      results = $filter('cnFilter')(results, filterBy);\n                    }\n                    addTags(times)(results);\n                  }\n                  else if(!options.tagsInput.addFromAutocompleteOnly) {\n                    tagsInput.addTag({\n                      [options.tagsInput.displayProperty]: tag,\n                      [options.tagsInput.valueProperty]: tag\n                    });\n                  }\n                }\n                else if(results.then) {\n                  results.then(addTags(times));\n                }\n              }\n            });\n          });\n\n          tagsInput\n            .on('input-change', function(value) {\n              if(value || !options.minLength) {\n                suggestionList.load(value, tagsInput.getTags());\n              }\n              else {\n                suggestionList.reset();\n              }\n            })\n            .on('input-focus', function(value) {\n              if(!suggestionList.visible && !options.minLength) {\n                suggestionList.load(value, tagsInput.getTags());\n              }\n            })\n            .on('input-keydown', function(e) {\n              var key, handled;\n\n              if(hotkeys.indexOf(e.keyCode) === -1) {\n                return;\n              }\n\n              // This hack is needed because jqLite doesn't implement stopImmediatePropagation properly.\n              // I've sent a PR to Angular addressing this issue and hopefully it'll be fixed soon.\n              // https://github.com/angular/angular.js/pull/4833\n              var immediatePropagationStopped = false;\n              e.stopImmediatePropagation = function() {\n                immediatePropagationStopped = true;\n                e.stopPropagation();\n              };\n              e.isImmediatePropagationStopped = function() {\n                return immediatePropagationStopped;\n              };\n\n              if(suggestionList.visible) {\n                key = e.keyCode;\n                handled = false;\n\n                if(key === KEYS.down) {\n                  suggestionList.selectNext();\n                  handled = true;\n                }\n                else if(key === KEYS.up) {\n                  suggestionList.selectPrior();\n                  handled = true;\n                }\n                else if(key === KEYS.escape) {\n                  suggestionList.reset();\n                  handled = true;\n                }\n                else if(key === KEYS.enter) {\n                  handled = scope.addSuggestion(e);\n                }\n\n                if(handled) {\n                  e.preventDefault();\n                  e.stopImmediatePropagation();\n                  scope.$apply();\n                }\n              }\n            })\n            .on('input-blur', function(e) {\n              //changed to use document click or focus, as this fires too soon and cancels\n              //automcomplete click events\n              suggestionList.reset();\n            });\n\n          documentClick = function(e) {\n            if(e.isDefaultPrevented()) return;\n\n            if(suggestionList.visible) {\n              // if autocomplete option was selected, or click/focus triggered outside of directive\n              if(($(e.target).closest('.suggestion').length || !$(e.target).closest(element[0]).length) &&\n                  !(e.type === 'blur' && !/^(input|select|textarea|button|a)$/i.test(e.target.tagName))) {\n                suggestionList.reset();\n                if(!/apply|digest/.test(scope.$root.$$phase)) scope.$apply();\n              }\n            }\n          };\n\n          $document\n            .on('click', documentClick)\n            .on('blur', documentClick);\n\n          scope.$on('$destroy', function() {\n            $document\n              .off('click', documentClick)\n              .off('blur', documentClick);\n\n            empty(tagsInput);\n            tagsInput = null;\n\n            empty(options);\n            options = null;\n          });\n        }\n      };\n    }]);\n\n\n  /**\n   * @ngdoc directive\n   * @name tiTranscludeAppend\n   * @module cnTagsInput\n   *\n   * @description\n   * Re-creates the old behavior of ng-transclude. Used internally by tagsInput directive.\n   */\n  tagsInput.directive('tiTranscludeAppend', function() {\n    return function(scope, element, attrs, ctrl, transcludeFn) {\n      transcludeFn(function(clone) {\n        element.append(clone);\n      });\n    };\n  });\n\n  /**\n   * @ngdoc directive\n   * @name tiAutosize\n   * @module cnTagsInput\n   *\n   * @description\n   * Automatically sets the input's width so its content is always visible. Used internally by tagsInput directive.\n   */\n  tagsInput.directive('tiAutosize', function() {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function(scope, element, attrs, ctrl) {\n        var THRESHOLD = 3,\n            span, resize;\n\n        span = angular.element('<span class=\"input\"></span>');\n        span.css('display', 'none')\n            .css('visibility', 'hidden')\n            .css('width', 'auto')\n            .css('white-space', 'pre');\n\n        element.parent().append(span);\n\n        resize = function(originalValue) {\n          var value = originalValue, width;\n\n          if(angular.isString(value) && value.length === 0) {\n            value = attrs.placeholder;\n          }\n\n          if(value) {\n            span.text(value);\n            span.css('display', '');\n            width = span.prop('offsetWidth');\n            span.css('display', 'none');\n          }\n\n          element.css('width', width ? width + THRESHOLD + 'px' : '');\n\n          return originalValue;\n        };\n\n        ctrl.$parsers.unshift(resize);\n        ctrl.$formatters.unshift(resize);\n\n        attrs.$observe('placeholder', function(value) {\n          if(!ctrl.$modelValue) {\n            resize(value);\n          }\n        });\n      }\n    };\n  });\n\n  /**\n   * @ngdoc service\n   * @name tagsInputConfig\n   * @module cnTagsInput\n   *\n   * @description\n   * Sets global configuration settings for both tagsInput and autoComplete directives. It's also used internally to parse and\n   * initialize options from HTML attributes.\n   */\n  tagsInput.provider('tagsInputConfig', function() {\n    var globalDefaults = {}, interpolationStatus = {};\n\n    /**\n     * @ngdoc method\n     * @name setDefaults\n     * @description Sets the default configuration option for a directive.\n     * @methodOf tagsInputConfig\n     *\n     * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput' or 'autoComplete'.\n     * @param {object} defaults Object containing options and their values.\n     *\n     * @returns {object} The service itself for chaining purposes.\n     */\n    this.setDefaults = function(directive, defaults) {\n      globalDefaults[directive] = defaults;\n      return this;\n    };\n\n    /***\n     * @ngdoc method\n     * @name setActiveInterpolation\n     * @description Sets active interpolation for a set of options.\n     * @methodOf tagsInputConfig\n     *\n     * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput' or 'autoComplete'.\n     * @param {object} options Object containing which options should have interpolation turned on at all times.\n     *\n     * @returns {object} The service itself for chaining purposes.\n     */\n    this.setActiveInterpolation = function(directive, options) {\n      interpolationStatus[directive] = options;\n      return this;\n    };\n\n    this.$get = [\"$interpolate\", function($interpolate) {\n      var converters = {};\n      converters[String] = function(value) {\n        return value;\n      };\n      converters[Number] = function(value) {\n        return parseInt(value, 10);\n      };\n      converters[Boolean] = function(value) {\n        return value.toLowerCase() === 'true';\n      };\n      converters[RegExp] = function(value) {\n        return new RegExp(value);\n      };\n      converters[Object] = function(value) {\n        return typeof value === 'object' ? value : Object(value);\n      };\n\n      return {\n        load: function(directive, scope, attrs, options) {\n          scope.options = {};\n          scope.attrs = attrs;\n          scope.uid = _.uniqueId();\n\n          angular.forEach(options, function(value, key) {\n            var type, localDefault, converter, getDefault, updateValue;\n\n            type = value[0];\n            localDefault = value[1];\n            converter = converters[type];\n\n            getDefault = function() {\n              var globalValue = globalDefaults[directive] && globalDefaults[directive][key];\n              return angular.isDefined(globalValue) ? globalValue : localDefault;\n            };\n\n            updateValue = function(value) {\n              scope.options[key] = value ? converter(value) : getDefault();\n            };\n\n            if(scope[key]) {\n              updateValue(scope[key]);\n            }\n            else if(interpolationStatus[directive] && interpolationStatus[directive][key]) {\n              attrs.$observe(key, function(value) {\n                updateValue(value);\n              });\n            }\n            else {\n              updateValue(attrs[key] && $interpolate(attrs[key])(scope.$parent));\n            }\n          });\n        }\n      };\n    }];\n  });\n\n\n  /* HTML templates */\n  tagsInput.run([\"$templateCache\", function($templateCache) {\n    $templateCache.put('cnTagsInput/tags-input.html', `\n        <ul class=\"list-group cn-autocomplete-list\"\n            ng-if=\"options.tagsStyle === 'list' && tagList.items.length && !options.hideTags\">\n          <li class=\"list-group-item {{options.tagClass}}\"\n              ng-repeat=\"tag in tagList.items\"\n              ng-class=\"{ selected: tag == tagList.selected }\">\n            <button ng-if=\"!ngDisabled\"\n                    ng-click=\"tagList.remove($index)\"\n                    type=\"button\" class=\"close pull-right\">\n              <span>&times;</span>\n            </button>\n            <span class=\"tag-item\" ng-bind-html=\"getDisplayHtml(tag)\"/>\n          </li>\n        </ul>\n        <div class=\"host clearfix\"\n             ng-hide=\"showBulk\"\n             ti-transclude-append=\"\">\n          <!-- hack to avoid browser's autocomplete -->\n          <input class=\"offscreen\"\n                 id=\"fake-{{attrs.id && attrs.id}}-input\"\n                 name=\"fake-{{attrs.id && attrs.id}}-input\">\n          <!-- end hack to avoid browser's autocomplete -->\n          <div class=\"input form-control tags\"\n               ng-class=\"{focused: hasFocus}\"\n               ng-disabled=\"ngDisabled\">\n            <input class=\"input\"\n                   ng-disabled=\"ngDisabled\"\n                   id=\"{{attrs.inputId || attrs.id && attrs.id + '-input-' + uid}}\"\n                   name=\"{{attrs.inputId || attrs.id && attrs.id + '-input-' + uid}}\"\n                   placeholder=\"{{options.placeholder}}\"\n                   tabindex=\"{{options.tabindex}}\"\n                   ng-model=\"newTag.text\"\n                   ng-model-options=\"{updateOn: 'default'}\"\n                   ng-change=\"newTagChange()\"\n                   ng-trim=\"false\"\n                   ng-class=\"{\n                      'invalid-tag': newTag.invalid,\n                      'hide-below': options.maxTags === 1 && tagList.items.length\n                   }\"\n                   ti-autosize=\"\"\n                   autocomplete=\"off\">\n            <span class=\"tag-item label {{options.tagClass}} label-block\"\n                  ng-if=\"options.tagsStyle !== 'list' && !options.hideTags && options.maxTags === 1 && tagList.items.length\"\n                  title=\"{{getDisplayText(tagList.items[0])}}\">\n              <span ng-bind-html=\"getDisplayHtml(tagList.items[0])\"/>\n              <a class=\"remove-button\"\n                 ng-if=\"!ngDisabled && !options.dropdownIcon\"\n                 ng-click=\"tagList.remove()\">\n                <span>&times;</span>\n              </a>\n            </span>\n            <ul class=\"tag-list\"\n                ng-if=\"options.tagsStyle !== 'list' && !options.hideTags && options.maxTags !== 1\">\n              <li class=\"tag-item label {{options.tagClass}}\"\n                  ng-repeat=\"tag in tagList.items\"\n                  ng-class=\"{ selected: tag == tagList.selected }\">\n                <span ng-bind-html=\"getDisplayHtml(tag)\"/>\n                <a class=\"remove-button\"\n                   ng-if=\"!ngDisabled\"\n                   ng-click=\"tagList.remove($index)\">\n                  <span>&times;</span>\n                </a>\n              </li>\n            </ul>\n            <button ng-if=\"options.showButton && options.dropdownIcon\"\n                    class=\"btn form-control-icon\" ng-disabled=\"ngDisabled\" tabindex=\"-1\">\n              <i class=\"{{options.dropdownStyle}}\"></i>\n            </button>\n          </div>\n        </div>\n        <div class=\"help-block\">\n          <button\n            class=\"btn btn-default btn-xs\"\n            ng-show=\"options.allowBulk && !showBulk\"\n            ng-click=\"showBulk = true\"\n          > Batch\n          </button>\n          <button\n            class=\"btn btn-default btn-xs\"\n            ng-show=\"options.showClearAll && tagList.items.length\"\n            ng-click=\"tagList.removeAll()\"\n          > Clear\n          </button>\n          <button\n            class=\"btn btn-default btn-xs\"\n            ng-show=\"options.showClearCache && tagList.suggestionList\"\n            ng-click=\"tagList.suggestionList.clearCache($event, newTag.text)\"\n          > <i class=\"fa fa-repeat\"/> Update Data\n          </button>\n        </div>\n        <div ng-show=\"showBulk\" class=\"clearfix\">\n          <textarea class=\"form-control\" ng-model=\"bulkTags\" ng-model-options=\"{'updateOn': 'input'}\" placeholder=\"{{options.bulkPlaceholder}}\"></textarea>\n          <p class=\"help-block\">\n            Press \"Enter\" to submit, \"Shift+Enter\" to add a new line\n          </p>\n          <p class=\"help-block\">\n            Add multiple with brackets, eg. \"citizennet[10]\"\n          </p>\n          <div class=\"btn-group help-block\">\n            <button class=\"btn btn-default btn-xs\" ng-click=\"showBulk = false\">Cancel</button>\n          </div>\n        </div>`\n    );\n\n    $templateCache.put('cnTagsInput/auto-complete.html', `\n        <div ng-if=\"!suggestionList.items.length && !options.groupBy\"\n             ng-class=\"{open: suggestionList.visible}\">\n          <ul class=\"autocomplete dropdown-menu\">\n            <li class=\"dropdown-header\" ng-bind-html=\"suggestionList.visible && noResultsMessage(suggestionList)\"></li>\n          </ul>\n        </div>\n        <div ng-if=\"suggestionList.items.length && isGroups\"\n             ng-class=\"{open: suggestionList.visible}\">\n          <ul class=\"autocomplete dropdown-menu\">\n            <li ng-if=\"!suggestionList.items[0].items.length && !suggestionList.items[1].items.length\" class=\"dropdown-header\">No results...</li>\n            <li ng-repeat-start=\"group in suggestionList.items\"></li>\n            <li class=\"dropdown-header\" ng-show=\"group.items.length\">{{group.label | titleCase}}</li>\n            <li ng-repeat=\"item in group.items\"\n                class=\"suggestion\"\n                ng-class=\"{selected: item == suggestionList.selected, disabled: item.disabled}\"\n                ng-click=\"addSuggestion($event)\"\n                ng-mouseenter=\"suggestionList.select(group.indexes[$index])\"\n                ng-bind-html=\"highlight(item, group.label)\">\n            </li>\n            <li class=\"divider\" ng-show=\"!$last && $parent.suggestionList.items[$index+1].items.length\"></li>\n            <li ng-repeat-end></li>\n          </ul>\n        </div>\n        <div ng-if=\"suggestionList.items.length && !isGroups && !options.groupBy\"\n             ng-class=\"{open: suggestionList.visible}\">\n          <ul class=\"autocomplete dropdown-menu\">\n            <li ng-repeat=\"item in suggestionList.items\"\n                class=\"suggestion\"\n                ng-class=\"{selected: item == suggestionList.selected, disabled: item.disabled}\"\n                ng-click=\"addSuggestion($event)\"\n                ng-mouseenter=\"suggestionList.select($index)\"\n                ng-bind-html=\"highlight(item)\">\n            </li>\n          </ul>\n        </div>\n        <div ng-if=\"!isGroups && options.groupBy\"\n             ng-class=\"{open: suggestionList.visible}\">\n          <ul class=\"autocomplete dropdown-menu\">\n            <li ng-repeat-start=\"(group, items) in suggestionList.items\"></li>\n            <li class=\"dropdown-header\" ng-show=\"items.length\">{{group | titleCase}}</li>\n            <li ng-repeat=\"item in items\"\n                class=\"suggestion\"\n                ng-class=\"{selected: item == suggestionList.selected, disabled: item.disabled}\"\n                ng-click=\"addSuggestion($event)\"\n                ng-mouseenter=\"suggestionList.select(suggestionList.items[group].indexes[$index])\"\n                ng-bind-html=\"highlight(item)\">\n            </li>\n            <li class=\"divider\" ng-show=\"!$last && items.length\"></li>\n            <li ng-repeat-end></li>\n          </ul>\n        </div>`\n    );\n  }]);\n})();\n"]}