{"version":3,"sources":["all.js","cn-tags-input.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_typeof","Symbol","iterator","constructor","SimplePubSub","events","on","names","handler","split","forEach","name","push","this","trigger","args","angular","call","makeObjectArray","array","key2","length","isObject","item","index","getArrayModelVal","options","arrayValueType","map","_","valueProperty","pluck","findInObjectArray","i","l","isFunction","objVal","has","toJson","toLowerCase","replaceAll","str","substr","newSubstr","expression","replace","RegExp","matchTagsWithModel","tags","model","isArray","equals","some","tag","selectAll","input","setSelectionRange","KEYS","backspace","tab","enter","escape","space","up","down","comma","tagsInput","module","directive","$timeout","$document","tagsInputConfig","$sce","$rootScope","TagList","getTagText","setTagText","tagIsValid","self","itemFormatter","displayProperty","text","tagText","minLength","maxLength","allowedTagsPattern","test","items","addText","add","disabled","trim","replaceSpacesWithDashes","maxTags","pop","$tag","$event","remove","splice","removeLast","lastTagIndex","enableEditingLastTag","selected","removeAll","restrict","require","scope","ngDisabled","onBeforeTagAdded","onBeforeTagRemoved","onBeforeTagChanged","onTagAdded","onTagRemoved","onTagChanged","onInit","newTag","transclude","templateUrl","controller","$scope","$attrs","$element","load","placeholder","String","tabindex","Number","removeTagSymbol","fromCharCode","Boolean","addOnEnter","addOnSpace","addOnComma","addOnBlur","clearOnBlur","required","minTags","allowLeftoverText","addFromAutocompleteOnly","tagClass","modelType","hideTags","dropdownIcon","tagsStyle","allowBulk","bulkDelimiter","bulkPlaceholder","showClearAll","showButton","tagList","registerAutocomplete","find","e","addTag","focusInput","focus","blurInput","blur","getTags","getOptions","registerProcessBulk","fn","processBulk","bulkTags","then","showBulk","link","element","attrs","ngModelCtrl","beforeAndAfter","before","after","arguments","apply","onFocus","preventDefault","target","blurTimeout","cancel","hasFocus","val","$root","$$phase","$apply","hotkeys","inputId","$name","undefined","invalid","$setValidity","getDisplayText","getDisplayHtml","trustAsHtml","track","newTagChange","each","first","triggerInit","prev","criteria","$prev","$setter","_ref2","$watch","changed","init","isUndefined","isDefined","$setDirty","isImmediatePropagationStopped","shouldAdd","shouldRemove","keyCode","isModifier","shiftKey","altKey","ctrlKey","metaKey","addKeys","indexOf","activeElement","prop","lostFocusToBrowserWindow","lostFocusToChildElement","contains","$","closest","$filter","$parse","Api","SuggestionList","debouncedLoadId","getDifference","lastPromise","groupList","splitListItems","formatItemText","mapIndexes","list","groupBy","keys","filtered","group","indexes","groups","formatter","addItem","toAdd","childKey","searchKeys","child","array1","array2","filter","reset","visible","query","show","select","promise","filterBy","processItems","isGroups","label","slice","maxResultsToShow","itemMap","data","skipFiltering","source","$query","results","debounceDelay","selectNext","selectPrior","elem","customTemplateUrl","tagsInputCtrl","suggestionList","getItemText","documentClick","highlightMatchedText","dropdownStyle","addSuggestion","added","copy","highlight","noResultsMessage","_ref3","addTags","times","batch","multiple","match","parseInt","_tagsInput$addTag","handled","immediatePropagationStopped","stopImmediatePropagation","stopPropagation","isDefaultPrevented","type","tagName","$on","off","ctrl","transcludeFn","clone","append","span","resize","THRESHOLD","css","parent","originalValue","width","isString","$parsers","unshift","$formatters","$observe","$modelValue","provider","globalDefaults","interpolationStatus","setDefaults","defaults","setActiveInterpolation","$get","$interpolate","converters","uid","uniqueId","localDefault","converter","getDefault","updateValue","globalValue","$parent","run","$templateCache","put"],"mappings":"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","file":"all.min.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*!\n * ngTagsInput v2.0.1\n * http://mbenford.github.io/ngTagsInput\n *\n * Copyright (c) 2013-2014 Michael Benford\n * License: MIT\n *\n * Generated at 2014-04-13 21:25:38 -0300\n */\n(function () {\n  'use strict';\n\n  var KEYS = {\n    backspace: 8,\n    tab: 9,\n    enter: 13,\n    escape: 27,\n    space: 32,\n    up: 38,\n    down: 40,\n    comma: 188\n  };\n\n  function SimplePubSub() {\n    var events = {};\n    return {\n      on: function on(names, handler) {\n        names.split(' ').forEach(function (name) {\n          if (!events[name]) {\n            events[name] = [];\n          }\n          events[name].push(handler);\n        });\n        return this;\n      },\n      trigger: function trigger(name, args) {\n        angular.forEach(events[name], function (handler) {\n          handler.call(null, args);\n        });\n        return this;\n      }\n    };\n  }\n\n  function makeObjectArray(array, key, key2) {\n    array = array || [];\n    if (array.length > 0 && !angular.isObject(array[0])) {\n      array.forEach(function (item, index) {\n        array[index] = _defineProperty({}, key, item);\n        if (key2) array[index][key2] = item;\n      });\n    }\n    return array;\n  }\n\n  function getArrayModelVal(array, options) {\n    if (options.arrayValueType === 'object') {\n      return (array || []).map(function (item) {\n        return _.isObject(item && item[options.valueProperty]) ? item[options.valueProperty] : item;\n      });\n    } else {\n      return _.pluck(array, options.valueProperty);\n    }\n  }\n\n  function findInObjectArray(array, obj, key) {\n    var item = null;\n    var i = 0;\n    var l = array.length;\n\n    if (_.isFunction(key)) {\n      var objVal = key(obj);\n      if (!objVal) return null;\n      for (; i < l; i++) {\n        if (objVal === key(array[i])) {\n          item = array[i];\n          break;\n        }\n      }\n    } else {\n      for (; i < l; i++) {\n        // I'm aware of the internationalization issues regarding toLowerCase()\n        // but I couldn't come up with a better solution right now\n        if (_.has(obj, key) && _.has(array[i], key) && (angular.toJson(array[i][key]) + '').toLowerCase() === (angular.toJson(obj[key]) + '').toLowerCase()) {\n          item = array[i];\n          break;\n        }\n      }\n    }\n    return item;\n  }\n\n  function replaceAll(str, substr, newSubstr) {\n    var expression = substr.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n    return str.replace(new RegExp(expression, 'gi'), newSubstr);\n  }\n\n  function matchTagsWithModel(tags, model, options) {\n    //if(tags.length !== model.length) return false;\n    if (!model || !tags || !tags.length) return false;\n\n    if (!_.isArray(model)) {\n      if (options.valueProperty) return angular.equals(model, tags[0][valueProperty]);\n      return angular.equals(model, tags[0]);\n    }\n\n    var array = getArrayModelVal(tags, options);\n    //console.log('array, tags, options:', array, tags, options);\n    return array.some(function (tag, i) {\n      //console.log('tag, model[i]:', tag, model[i], angular.equals(tag, model[i]));\n      return angular.equals(tag, model[i]);\n    });\n  }\n\n  function selectAll(input) {\n    if (input.value) {\n      input.setSelectionRange(0, input.value.length);\n    }\n  }\n\n  var tagsInput = angular.module('cnTagsInput', []);\n\n  /**\n   * @ngdoc directive\n   * @name tagsInput\n   * @module cnTagsInput\n   *\n   * @description\n   * Renders an input box with tag editing support.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} [displayProperty=text] Property to be rendered as the tag label.\n   * @param {string=} [valueProperty=value] Property to be used as the value when modelType is not array/object.\n   * @param {number=} tabindex Tab order of the control.\n   * @param {string=} [placeholder=Add a tag] Placeholder text for the control.\n   * @param {number=} [minLength=3] Minimum length for a new tag.\n   * @param {number=} maxLength Maximum length allowed for a new tag.\n   * @param {boolean=} required Sets required validation error key.\n   * @param {number=} minTags Sets minTags validation error key if the number of tags added is less than minTags.\n   * @param {number=} maxTags Sets maxTags validation error key if the number of tags added is greater than maxTags.\n   * @param {boolean=} [allowLeftoverText=false] Sets leftoverText validation error key if there is any leftover text in\n   *                                             the input element when the directive loses focus.\n   * @param {string=} [removeTagSymbol=×] Symbol character for the remove tag button.\n   * @param {boolean=} [addOnEnter=true] Flag indicating that a new tag will be added on pressing the ENTER key.\n   * @param {boolean=} [addOnSpace=false] Flag indicating that a new tag will be added on pressing the SPACE key.\n   * @param {boolean=} [addOnComma=true] Flag indicating that a new tag will be added on pressing the COMMA key.\n   * @param {boolean=} [addOnBlur=false] Flag indicating that a new tag will be added when the input field loses focus.\n   * @param {boolean=} [clearOnBlur=false] Flag indicating whether to clear the typed text when the input field loses focus.\n   * @param {boolean=} [replaceSpacesWithDashes=false] Flag indicating that spaces will be replaced with dashes.\n   * @param {string=} [allowedTagsPattern=.+] Regular expression that determines whether a new tag is valid.\n   * @param {boolean=} [enableEditingLastTag=false] Flag indicating that the last tag will be moved back into\n   *                                                the new tag input box instead of being removed when the backspace key\n   *                                                is pressed and the input box is empty.\n   * @param {boolean=} [addFromAutocompleteOnly=false] Flag indicating that only tags coming from the autocomplete list will be allowed.\n   *                                                   When this flag is true, addOnEnter, addOnComma, addOnSpace, addOnBlur and\n   *                                                   allowLeftoverText values are ignored.\n   * @param {expression} onBeforeTagAdded Expression to evaluate upon adding a new tag. The new tag is available as $tag.\n   * @param {expression} onBeforeTagRemoved Expression to evaluate upon removing an existing tag. The removed tag is available as $tag.\n   * @param {expression} onBeforeTagChanged Expression to evaluate upon adding or removing a tag. The affected tag is available as $tag. Prev value avialble as $prev.\n   * @param {expression} onTagAdded Expression to evaluate upon adding a new tag. The new tag is available as $tag.\n   * @param {expression} onTagRemoved Expression to evaluate upon removing an existing tag. The removed tag is available as $tag.\n   * @param {expression} onTagChanged Expression to evaluate upon adding or removing a tag. The affected tag is available as $tag. Prev value avialble as $prev.\n   * @param {expression} onInit Expression to evaluate upon initializing model value.\n   * @param {string} modelType Defines ngModel type, if anything other than array, model is set to first tag in list\n   * @param {string} arrayValueType Defines ngModel[] type, if anything other than object, value is set mapped from object's values\n   * @param {boolean=} [hideTags=false] Flag indicating whether to hide tag list (for manually displaying tag list in other way)\n   * @param {boolean=} [dropdownIcon=false] Flag to show icon on right side\n   * @param {string=} [tagsStyle='tags'] Default tags style\n   */\n  tagsInput.directive('tagsInput', [\"$timeout\", \"$document\", \"tagsInputConfig\", \"$sce\", \"$rootScope\", function ($timeout, $document, tagsInputConfig, $sce, $rootScope) {\n    function TagList(options, events) {\n      var self = {},\n          getTagText,\n          setTagText,\n          tagIsValid;\n\n      //getTagText = function(tag) {\n      //  if(!_.isObject(tag)) return tag;\n      //  return tag[options.displayProperty];\n      //};\n\n      getTagText = options.getTagText = function (tag) {\n        if (!_.isObject(tag)) return tag;\n        return options.itemFormatter ? options.itemFormatter(tag) : tag[options.displayProperty];\n      };\n\n      setTagText = function setTagText(tag, text) {\n        // only create tag object when not adding from auto-complete\n        if (tag[options.displayProperty]) return;\n\n        tag[options.displayProperty] = text;\n        if (options.valueProperty && !_.has(tag, options.valueProperty)) {\n          tag[options.valueProperty] = text;\n        }\n      };\n\n      tagIsValid = function tagIsValid(tag) {\n        var tagText = getTagText(tag) + '';\n\n        return (!options.minLength || tagText.length >= options.minLength) && (!options.maxLength || tagText.length <= options.maxLength) && options.allowedTagsPattern.test(tagText) && !findInObjectArray(self.items, tag,\n        //_.has(tag, options.valueProperty) ? options.valueProperty : getTagText\n        options.valueProperty || getTagText);\n      };\n\n      self.items = [];\n\n      self.addText = function (text) {\n        var tag = {};\n        setTagText(tag, text);\n        self.add(tag);\n      };\n\n      self.add = function (tag) {\n        if (tag.disabled) return;\n\n        var tagText = getTagText(tag);\n\n        if (tagText.trim) tagText = tagText.trim();\n\n        if (options.replaceSpacesWithDashes) {\n          tagText = tagText.replace(/\\s/g, '-');\n        }\n\n        setTagText(tag, tagText);\n\n        if (tagIsValid(tag)) {\n          if (options.maxTags && self.items.length >= options.maxTags) {\n            self.items.pop();\n            events.trigger('tag-removed', { $tag: tag, $event: 'tag-removed' });\n          }\n          self.items.push(tag);\n          events.trigger('tag-added', { $tag: tag, $event: 'tag-added' });\n        } else {\n          events.trigger('invalid-tag', { $tag: tag, $event: 'invalid-tag' });\n        }\n\n        return tag;\n      };\n\n      self.remove = function (index) {\n        var tag = self.items.splice(index, 1)[0];\n        events.trigger('tag-removed', { $tag: tag, $event: 'tag-removed' });\n        return tag;\n      };\n\n      self.removeLast = function () {\n        var tag,\n            lastTagIndex = self.items.length - 1;\n\n        if (options.enableEditingLastTag || self.selected) {\n          self.selected = null;\n          tag = self.remove(lastTagIndex);\n        } else if (!self.selected) {\n          self.selected = self.items[lastTagIndex];\n        }\n\n        return tag;\n      };\n\n      self.removeAll = function () {\n        var tags = self.items.splice(0, self.items.length);\n        tags.forEach(function (tag) {\n          events.trigger('tag-removed', { $tag: tag, $event: 'tag-removed' });\n        });\n      };\n\n      return self;\n    }\n\n    return {\n      restrict: 'E',\n      require: 'ngModel',\n      scope: {\n        tags: '=ngModel',\n        itemFormatter: '=',\n        ngDisabled: '=',\n        onBeforeTagAdded: '&',\n        onBeforeTagRemoved: '&',\n        onBeforeTagChanged: '&',\n        onTagAdded: '&',\n        onTagRemoved: '&',\n        onTagChanged: '&',\n        onInit: '&',\n        newTag: '=?'\n      },\n      replace: false,\n      transclude: true,\n      templateUrl: 'cnTagsInput/tags-input.html',\n      controller: [\"$scope\", \"$attrs\", \"$element\", function ($scope, $attrs, $element) {\n        tagsInputConfig.load('tagsInput', $scope, $attrs, {\n          placeholder: [String, ''],\n          tabindex: [Number],\n          removeTagSymbol: [String, String.fromCharCode(215)],\n          replaceSpacesWithDashes: [Boolean, false],\n          minLength: [Number, 2],\n          maxLength: [Number],\n          addOnEnter: [Boolean, true],\n          addOnSpace: [Boolean, false],\n          addOnComma: [Boolean, true],\n          addOnBlur: [Boolean, false],\n          clearOnBlur: [Boolean, false],\n          allowedTagsPattern: [RegExp, /.+/],\n          enableEditingLastTag: [Boolean, false],\n          required: [Boolean, false],\n          minTags: [Number],\n          maxTags: [Number],\n          displayProperty: [String, 'text'],\n          valueProperty: [String],\n          allowLeftoverText: [Boolean, false],\n          addFromAutocompleteOnly: [Boolean, false],\n          //tagClasses: [Object, null],\n          tagClass: [String, ''],\n          modelType: [String, 'array'],\n          arrayValueType: [String, 'object'],\n          hideTags: [Boolean, false],\n          dropdownIcon: [Boolean, false],\n          tagsStyle: [String, 'tags'],\n          allowBulk: [Boolean, false],\n          bulkDelimiter: [RegExp, /, ?|\\n/],\n          bulkPlaceholder: [String, 'Enter a list separated by commas or new lines'],\n          showClearAll: [Boolean, false],\n          showButton: [Boolean, false]\n        });\n\n        var options = $scope.options;\n\n        if (!options.valueProperty && (!/object|array/.test(options.modelType) || options.arrayValueType !== 'object')) {\n          options.valueProperty = 'value';\n        }\n\n        if ($scope.itemFormatter) options.itemFormatter = $scope.itemFormatter;\n\n        if (options.tagsStyle === 'tags') {\n          options.tagClass = options.tagClass || 'label-primary';\n        }\n\n        if (options.allowBulk && (options.modelType !== 'array' || options.maxTags === 1)) {\n          options.allowBulk = false;\n        }\n\n        $scope.events = new SimplePubSub();\n        $scope.tagList = new TagList(options, $scope.events);\n\n        this.registerAutocomplete = function () {\n          var input = options.input = $element.find('input.input');\n          input.on('keydown', function (e) {\n            $scope.events.trigger('input-keydown', e);\n          });\n\n          return {\n            addTag: function addTag(tag) {\n              return $scope.tagList.add(tag);\n            },\n            focusInput: function focusInput() {\n              input[0].focus();\n            },\n            blurInput: function blurInput() {\n              input[0].blur();\n            },\n            getTags: function getTags() {\n              return $scope.tagList.items;\n            },\n            getOptions: function getOptions() {\n              return options;\n            },\n            on: function on(name, handler) {\n              $scope.events.on(name, handler);\n              return this;\n            },\n            registerProcessBulk: function registerProcessBulk(fn) {\n              $scope.processBulk = function () {\n                fn($scope.bulkTags).then(function () {\n                  $scope.showBulk = false;\n                  $scope.bulkTags = '';\n                });\n              };\n            }\n          };\n        };\n      }],\n      link: function link(scope, element, attrs, ngModelCtrl) {\n        var hotkeys = [KEYS.enter, KEYS.comma, KEYS.space, KEYS.backspace],\n            tagList = scope.tagList,\n            events = scope.events,\n            options = scope.options,\n            input = element.find('input.input'),\n            blurTimeout;\n\n        if (attrs.inputId && !ngModelCtrl.$name) {\n          ngModelCtrl.$name = attrs.inputId;\n        }\n\n        // before callbacks allow code to modify tag before it's added\n        // after callback fired after ngModel has chance to update\n        function beforeAndAfter(before, after) {\n          return function () {\n            var args = arguments;\n            before.apply(this, args);\n            $timeout(function () {\n              after.apply(this, args);\n            });\n          };\n        }\n\n        events.on('tag-added', beforeAndAfter(scope.onBeforeTagAdded, scope.onTagAdded)).on('tag-removed', beforeAndAfter(scope.onBeforeTagRemoved, scope.onTagRemoved)).on('tag-changed', beforeAndAfter(scope.onBeforeTagChanged, scope.onTagChanged)).on('tag-init', scope.onInit).on('tag-added tag-removed', function (e) {\n          if (!options.maxTags || options.maxTags > scope.tagList.items.length) {\n            selectAll(options.input[0]);\n          } else {\n            scope.newTag.text = '';\n          }\n          if (options.modelType === 'array') {\n            //if(options.arrayValueType === 'object') {\n            if (!options.valueProperty) {\n              scope.tags = scope.tagList.items;\n            } else {\n              scope.tags = getArrayModelVal(scope.tagList.items, options);\n              //console.log('on:tag-added:scope.tags:', scope.tags);\n            }\n          } else {\n              if (e.$event === 'tag-removed') {\n                //ngModelCtrl.$setViewValue(undefined);\n                scope.tags = undefined;\n              } else {\n                //if(options.modelType === 'object') {\n                if (!options.valueProperty) {\n                  //ngModelCtrl.$setViewValue(e.$tag);\n                  scope.tags = e.$tag;\n                } else {\n                  //ngModelCtrl.$setViewValue(e.$tag.value);\n                  scope.tags = _.has(e.$tag, options.valueProperty) ? e.$tag[options.valueProperty] : e.$tag[options.displayProperty];\n                }\n                //scope.tags = [e.$tag];\n              }\n            }\n        }).on('invalid-tag', function () {\n          scope.newTag.invalid = true;\n        }).on('input-change', function () {\n          tagList.selected = null;\n          scope.newTag.invalid = null;\n        }).on('input-focus', function () {\n          ngModelCtrl.$setValidity('leftoverText', true);\n        }).on('input-blur', function () {\n          if (!options.addFromAutocompleteOnly) {\n            if (options.addOnBlur && scope.newTag.text) {\n              tagList.addText(scope.newTag.text);\n            }\n\n            //ngModelCtrl.$setValidity('leftoverText', options.allowLeftoverText ? true : !scope.newTag.text);\n          }\n\n          // Reset newTag\n          if (options.clearOnBlur) {\n            scope.newTag.text = '';\n            scope.newTag.invalid = null;\n          }\n        });\n\n        scope.newTag = { text: '', invalid: null };\n\n        scope.getDisplayText = scope.itemFormatter || function (tag) {\n          return tag && ((tag[options.displayProperty] || 'undefined') + '').trim();\n        };\n\n        scope.getDisplayHtml = function (tag) {\n          return $sce.trustAsHtml(scope.getDisplayText(tag));\n        };\n\n        scope.track = function (tag) {\n          return tag[options.displayProperty];\n        };\n\n        scope.newTagChange = function () {\n          events.trigger('input-change', scope.newTag.text);\n        };\n\n        scope.processBulk = scope.processBulk || function () {\n          var tags = scope.bulkTags.split(options.bulkDelimiter);\n          _.each(tags, function (text) {\n            var tag = {};\n            tag[options.displayProperty] = text;\n            scope.tagList.add(tag);\n          });\n          scope.showBulk = false;\n          scope.bulkTags = '';\n        };\n\n        var first = true;\n\n        scope.triggerInit = function (value, prev) {\n          //console.log('triggerInit:', value, options.valueProperty);\n          var criteria = options.valueProperty ? _defineProperty({}, options.valueProperty, value) : value;\n          if (!tagList.items.length || !_.find(tagList.items, criteria)) {\n            events.trigger('tag-init', {\n              $tag: value,\n              $prev: prev,\n              $event: 'tag-init',\n              $setter: function $setter(val) {\n                //console.log('$setter:', val, options.valueProperty);\n                if (val && !_.isObject(val)) {\n                  var _ref2;\n\n                  tagList.items = [(_ref2 = {}, _defineProperty(_ref2, options.displayProperty, val), _defineProperty(_ref2, options.valueProperty, val), _ref2)];\n                } else {\n                  tagList.items = _.isArray(val) ? val : [val];\n                }\n                return tagList.items;\n              }\n            });\n          }\n        };\n\n        scope.$watch('tags', function (value, prev) {\n          var changed = !angular.equals(value, prev);\n          var init = !changed && first;\n          //console.log('$watch:tags:', value, prev, changed, init);\n\n          if (init) {\n            scope.triggerInit(value, prev);\n          }\n          if (changed) {\n            events.trigger('tag-changed', {\n              $tag: value,\n              $prev: prev,\n              $event: 'tag-changed'\n            });\n          }\n\n          if (options.modelType === 'array') {\n            if (_.isArray(value)) {\n              if (value.length) {\n                //console.log('on:tags:', value, tagList.items, options.valueProperty);\n                if (!matchTagsWithModel(tagList.items, scope.tags, options)) {\n                  scope.triggerInit(value, prev);\n                }\n                if (!matchTagsWithModel(tagList.items, scope.tags, options) || tagList.items.length !== scope.tags.length) {\n                  tagList.items = makeObjectArray(value, options.displayProperty, options.valueProperty);\n                  scope.tags = getArrayModelVal(tagList.items, options);\n                  //console.log('on:tags:scope.tags:', scope.tags);\n                  return;\n                }\n              } else {\n                tagList.items = [];\n                if (angular.isUndefined(prev)) return;\n              }\n            } else if (value === undefined) {\n              tagList.items = [];\n              scope.tags = [];\n              return;\n            }\n          } else if (angular.isDefined(value)) {\n            if (_.isArray(value)) {\n              if (value.length) {\n                //if(options.modelType === 'object') {\n                if (!options.valueProperty) {\n                  scope.tags = value[0];\n                } else {\n                  scope.tags = value[0][options.valueProperty];\n                }\n\n                return;\n              } else {\n                scope.tags = undefined;\n              }\n            } else {\n              if (options.modelType === 'object') {\n                if (value !== null) tagList.items = [value];\n              } else {\n                if (_.isObject(value)) {\n                  tagList.items = [value];\n\n                  var val = value[options.valueProperty];\n                  if (_.isUndefined(val)) val = value[options.displayProperty];\n                  scope.tags = val;\n\n                  return;\n                } else if (!_.isUndefined(value) && (!tagList.items.length || tagList.items[0][options.valueProperty] !== value)) {\n                  scope.triggerInit(value, prev);\n                }\n                //else {\n                //  var val = _.first(_.pluck(tagList.items, options.valueProperty));\n                //  if(!val && val !== 0) val = _.first(_.pluck(tagList.items, options.displayProperty));\n                //  if(val !== value) {\n                //    var newTag = {};\n                //    newTag[options.valueProperty] = value;\n                //    tagList.items = [];\n                //  }\n                // todo: why were we overriding scope.tags? This will lead to recursion\n                //scope.tags = val;\n                //}\n              }\n            }\n          } else if (!value && tagList.items.length) {\n              tagList.items = [];\n            }\n\n          if (!init && changed) {\n            ngModelCtrl.$setDirty();\n          }\n\n          // hack because schemaForm is incorrectly invalidating model sometimes\n          ngModelCtrl.$setValidity('schemaForm', true);\n          if (options.modelType === 'array') {\n            ngModelCtrl.$setValidity('tv4-401', value && options.maxTags ? value.length <= options.maxTags : true);\n            ngModelCtrl.$setValidity('tv4-302', value ? angular.isDefined(options.minTags) ? value.length >= options.minTags : true : false);\n          } else {\n            ngModelCtrl.$setValidity('tv4-302', !options.required || !angular.isUndefined(value));\n          }\n\n          first = false;\n        }, true);\n\n        // stupid ugly hack to fix order between input and autocomplete events\n        $timeout(function () {\n          input.on('keydown', function (e) {\n            // This hack is needed because jqLite doesn't implement stopImmediatePropagation properly.\n            // I've sent a PR to Angular addressing this issue and hopefully it'll be fixed soon.\n            // https://github.com/angular/angular.js/pull/4833\n            if (e.isImmediatePropagationStopped && e.isImmediatePropagationStopped()) {\n              return;\n            }\n\n            var key = e.keyCode,\n                isModifier = e.shiftKey || e.altKey || e.ctrlKey || e.metaKey,\n                addKeys = {},\n                shouldAdd,\n                shouldRemove;\n\n            if (isModifier || hotkeys.indexOf(key) === -1) {\n              return;\n            }\n\n            addKeys[KEYS.enter] = options.addOnEnter;\n            addKeys[KEYS.comma] = options.addOnComma;\n            addKeys[KEYS.space] = options.addOnSpace;\n\n            shouldAdd = !options.addFromAutocompleteOnly && addKeys[key];\n            shouldRemove = !shouldAdd && key === KEYS.backspace && scope.newTag.text.length === 0;\n\n            if (shouldAdd) {\n              tagList.addText(scope.newTag.text);\n\n              scope.$apply();\n              e.preventDefault();\n            } else if (shouldRemove) {\n              var tag = tagList.removeLast();\n              if (tag && options.enableEditingLastTag) {\n                scope.newTag.text = tag[options.displayProperty];\n              }\n\n              scope.$apply();\n              e.preventDefault();\n            }\n          }).on('focus', onFocus).on('blur', function (e) {\n            blurTimeout = $timeout(function () {\n              var activeElement = $document.prop('activeElement'),\n                  lostFocusToBrowserWindow = activeElement === input[0],\n                  lostFocusToChildElement = element.find('.host')[0].contains(activeElement);\n\n              if (lostFocusToBrowserWindow || !lostFocusToChildElement) {\n                scope.hasFocus = false;\n                events.trigger('input-blur', e);\n              }\n            }, 150); // timeout so that click event triggers first\n          });\n        });\n\n        element.find('textarea').on('keydown', function (e) {\n          if (e.keyCode === KEYS.enter) {\n            if (!e.altKey && !e.ctrlKey && !e.metaKey && !e.shiftKey) {\n              e.preventDefault();\n              scope.processBulk();\n            }\n          }\n        });\n\n        element.find('div').on('click', function (e) {\n          if (!$(e.target).closest('.suggestion').length) {\n            e.preventDefault();\n            input[0].focus();\n          }\n        });\n\n        function onFocus(e) {\n          if (e) e.preventDefault();\n          if (scope.ngDisabled) return;\n\n          selectAll(e.target);\n\n          if (blurTimeout) $timeout.cancel(blurTimeout);\n\n          scope.hasFocus = true;\n          events.trigger('input-focus', input.val());\n\n          if (!/apply|digest/.test(scope.$root.$$phase)) scope.$apply();\n        }\n      }\n    };\n  }]);\n\n  /**\n   * @ngdoc directive\n   * @name autoComplete\n   * @module cnTagsInput\n   *\n   * @description\n   * Provides autocomplete support for the tagsInput directive.\n   *\n   * @param {expression} source Expression to evaluate upon changing the input content. The input value is available as\n   *                            $query. The result of the expression must be a promise that eventually resolves to an\n   *                            array of strings.\n   * @param {number=} [debounceDelay=100] Amount of time, in milliseconds, to wait before evaluating the expression in\n   *                                      the source option after the last keystroke.\n   * @param {number=} [minLength=3] Minimum number of characters that must be entered before evaluating the expression\n   *                                 in the source option.\n   * @param {boolean=} [highlightMatchedText=true] Flag indicating that the matched text will be highlighted in the\n   *                                               suggestions list.\n   * @param {number=} [maxResultsToShow=10] Maximum number of results to be displayed at a time.\n   */\n  tagsInput.directive('autoComplete', [\"$document\", \"$timeout\", \"$filter\", \"$sce\", \"tagsInputConfig\", \"$parse\", 'Api', function ($document, $timeout, $filter, $sce, tagsInputConfig, $parse, Api) {\n    function SuggestionList(scope, options) {\n      var self = {},\n          debouncedLoadId,\n          getDifference,\n          lastPromise,\n          groupList,\n          splitListItems,\n          formatItemText,\n          mapIndexes;\n\n      groupList = function groupList(list, groupBy) {\n        var filtered = {},\n            map = [],\n            index = 0,\n            keys;\n\n        // loop through each item in the list\n        _.each(list, function (item) {\n          keys = $parse(groupBy)(item);\n          if (!_.isArray(keys)) keys = [keys];\n          _.each(keys, function (key) {\n            if (!filtered[key]) {\n              filtered[key] = [];\n            }\n            filtered[key].push(item);\n          });\n        });\n\n        _.each(filtered, function (group) {\n          group.indexes = [];\n          _.each(group, function (item) {\n            group.indexes.push(index++);\n            map.push(item);\n          });\n        });\n\n        return {\n          groups: filtered,\n          map: map\n        };\n      };\n\n      formatItemText = function formatItemText(item, formatter) {\n        if (formatter) {\n          if (!_.isArray(formatter)) {\n            formatter = [formatter, {}];\n          }\n          return $parse(formatter[0])((formatter[1].val = item) && formatter[1]);\n        }\n\n        return item;\n      };\n\n      splitListItems = function splitListItems(items) {\n        var keys = [];\n\n        function addItem(key, item, group, prop) {\n          var text = _.isObject(item) ? item[prop || options.tagsInput.displayProperty] : item,\n              toAdd = {\n            text: formatItemText(text, group.formatter),\n            value: text,\n            key: key,\n            childKey: prop /*,\n                           tagClass: options.tagClasses && options.tagClasses[key] || options.tagClass*/\n          };\n\n          if (!_.find(group.items, toAdd)) {\n            group.items.push(toAdd);\n          }\n        }\n\n        _.each(scope.searchKeys, function (group) {\n          var key = group.key;\n          group.items = [];\n\n          _.each(items, function (item) {\n            if (item[key]) {\n              if (_.isArray(item[key])) {\n                _.each(item[key], function (child) {\n                  addItem(key, child, group, group.childKey);\n                });\n              } else {\n                addItem(key, item[key], group, group.childKey);\n              }\n            }\n          });\n          keys.push(group);\n        });\n\n        return keys;\n      };\n\n      mapIndexes = function mapIndexes(items) {\n        var map = [],\n            index = 0;\n\n        _.each(items, function (group) {\n          group.indexes = [];\n          _.each(group.items, function (item) {\n            group.indexes.push(index++);\n            map.push(item);\n          });\n        });\n\n        return map;\n      };\n\n      getDifference = function getDifference(array1, array2) {\n        if (!array2.length) {\n          return array1.filter(function (item) {\n            return item[options.tagsInput.displayProperty] !== '';\n          });\n        }\n        return array1.filter(function (item) {\n          return !findInObjectArray(array2, item,\n          //_.has(item, options.tagsInput.valueProperty) ? options.tagsInput.valueProperty : options.tagsInput.getTagText\n          options.tagsInput.valueProperty || options.tagsInput.getTagText);\n        });\n      };\n\n      self.reset = function () {\n        lastPromise = null;\n\n        self.items = [];\n        self.visible = false;\n        self.index = -1;\n        self.selected = null;\n        self.query = null;\n\n        $timeout.cancel(debouncedLoadId);\n      };\n\n      self.show = function () {\n        self.selected = null;\n        self.visible = true;\n        self.select(0);\n      };\n\n      self.load = function (query, tags) {\n        if (query.length < options.minLength) {\n          self.reset();\n          return;\n        }\n\n        var promise,\n\n        //filterBy = {},\n        filterBy = query,\n            groups,\n            processItems = function processItems(items) {\n          if (promise && promise !== lastPromise) {\n            return;\n          }\n\n          if (scope.searchKeys) {\n            scope.isGroups = true;\n            //filterBy = query;\n            items = splitListItems(items);\n          }\n          if (_.isObject(items) && !_.isArray(items)) {\n            scope.isGroups = true;\n            items = _.map(items, function (list, group) {\n              return {\n                items: list,\n                label: group\n              };\n            });\n          }\n          if (scope.isGroups) {\n            _.each(items, function (group) {\n              group.items = getDifference(group.items, tags);\n              if (query) group.items = $filter('cnFilter')(group.items, filterBy);\n\n              group.items = group.items.slice(0, options.maxResultsToShow);\n            });\n            self.itemMap = mapIndexes(items);\n          } else {\n            //filterBy[options.tagsInput.displayProperty] = query;\n            items = makeObjectArray(items.data || items, options.tagsInput.displayProperty);\n            items = getDifference(items, tags);\n            if (query && !options.skipFiltering) {\n              items = $filter('cnFilter')(items, filterBy);\n            }\n\n            items = items.slice(0, options.maxResultsToShow);\n\n            if (options.groupBy) {\n              groups = groupList(items, options.groupBy);\n              items = groups.groups;\n              self.itemMap = groups.map;\n            }\n          }\n\n          self.items = items;\n\n          /*\n          if(!_.isEmpty(self.items)) {\n            self.show();\n          }\n          else {\n            self.reset();\n          }\n          */\n          self.show();\n        };\n\n        $timeout.cancel(debouncedLoadId);\n        self.query = query;\n        debouncedLoadId = $timeout(function () {\n          var source = scope.source({ $query: query });\n          if (_.isArray(source)) {\n            $timeout(function () {\n              processItems(source || []);\n            });\n          } else {\n            if (!options.minLength) {\n              source.then(function (results) {\n                scope.source = function () {\n                  return results;\n                };\n                processItems(results || []);\n              });\n            } else {\n              promise = source;\n              lastPromise = promise;\n              promise.then(processItems);\n            }\n          }\n        }, options.minLength ? options.debounceDelay : 0, false);\n      };\n\n      self.selectNext = function () {\n        self.select(++self.index);\n      };\n\n      self.selectPrior = function () {\n        self.select(--self.index);\n      };\n\n      self.select = function (index) {\n        var list = self.itemMap || self.items;\n        if (index < 0) {\n          index = list.length - 1;\n        } else if (index >= list.length) {\n          index = 0;\n        }\n        self.index = index;\n        if (self.itemMap) {\n          self.selected = self.itemMap[index];\n        } else {\n          self.selected = self.items[index];\n        }\n      };\n\n      //self.reset();\n\n      return self;\n    }\n\n    function encodeHTML(value) {\n      return value ? value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;') : '';\n    }\n\n    return {\n      restrict: 'E',\n      require: '^tagsInput',\n      scope: {\n        source: '&',\n        searchKeys: '=?'\n      },\n      templateUrl: function templateUrl(elem, attrs) {\n        return attrs.customTemplateUrl || 'cnTagsInput/auto-complete.html';\n      },\n      link: function link(scope, element, attrs, tagsInputCtrl) {\n        var hotkeys = [KEYS.enter, KEYS.tab, KEYS.escape, KEYS.up, KEYS.down],\n            suggestionList,\n            tagsInput,\n            options,\n            getItemText,\n            documentClick;\n\n        tagsInputConfig.load('autoComplete', scope, attrs, {\n          debounceDelay: [Number, 250],\n          minLength: [Number, 3],\n          highlightMatchedText: [Boolean, true],\n          maxResultsToShow: [Number, 75],\n          groupBy: [String, ''],\n          skipFiltering: [Boolean, false]\n        });\n\n        options = scope.options;\n\n        tagsInput = tagsInputCtrl.registerAutocomplete();\n        options.tagsInput = tagsInput.getOptions();\n\n        if (options.minLength === 0 /* && _.isArray(scope.source())*/) {\n            options.tagsInput.dropdownIcon = true;\n            if (options.tagsInput.maxTags === 1) {\n              options.tagsInput.dropdownStyle = 'caret';\n            } else {\n              options.tagsInput.dropdownStyle = 'fa fa-plus';\n            }\n          } else {\n          options.tagsInput.dropdownStyle = 'fa fa-search';\n        }\n\n        suggestionList = new SuggestionList(scope, options);\n\n        getItemText = options.tagsInput.itemFormatter || function (item) {\n          return String(item[options.tagsInput.displayProperty]);\n        };\n\n        scope.suggestionList = suggestionList;\n\n        scope.addSuggestion = function (e) {\n          e.preventDefault();\n\n          //selectAll(e.target);\n\n          var added = false;\n\n          if (suggestionList.selected) {\n            tagsInput.addTag(angular.copy(suggestionList.selected));\n\n            if (!options.tagsInput.maxTags || tagsInput.getTags().length < options.tagsInput.maxTags) {\n              var i = suggestionList.items.indexOf(suggestionList.selected);\n              suggestionList.items.splice(i, 1);\n              suggestionList.select(i);\n              tagsInput.focusInput();\n            } else {\n              suggestionList.reset();\n              tagsInput.blurInput();\n            }\n\n            added = true;\n          }\n          return added;\n        };\n\n        scope.highlight = function (item, key) {\n          var text = getItemText(item, key);\n          //text = encodeHTML(text);\n          if (suggestionList.query && options.highlightMatchedText) {\n            //text = replaceAll(text, encodeHTML(suggestionList.query), '<b>$&</b>');\n            text = replaceAll(text, suggestionList.query, '<b>$&</b>');\n          }\n          return $sce.trustAsHtml('<a>' + text + '</a>');\n        };\n\n        scope.track = function (item, key) {\n          return getItemText(item, key);\n        };\n\n        scope.noResultsMessage = function (_ref3) {\n          var visible = _ref3.visible;\n          var query = _ref3.query;\n\n          if (!query) return 'No options...';\n          return $sce.trustAsHtml('No results for <b>' + query + '</b>...');\n        };\n\n        tagsInput.registerProcessBulk(function (bulkTags) {\n          var tags = bulkTags.split(options.tagsInput.bulkDelimiter);\n\n          var addTags = function addTags(i) {\n            return function (data) {\n              _.times(i, function (i) {\n                if (data[i]) tagsInput.addTag(data[i]);\n              });\n            };\n          };\n\n          // in case a query is involved...doesn't hurt to use even if not\n          return Api.batch(function () {\n            for (var i = 0, l = tags.length; i < l; i++) {\n              if (options.tagsInput.maxTags && tagsInput.getTags().length >= options.tagsInput.maxTags) break;\n              var tag = tags[i];\n              var times = 1;\n              var multiple = tags[i].match(/(.*) ?\\((\\d+)\\)$/);\n\n              if (multiple) {\n                tag = multiple[1];\n                times = parseInt(multiple[2]);\n              }\n\n              var results = scope.source({ $query: tag });\n\n              if (_.isArray(results)) {\n                if (results.length) {\n                  if (!options.skipFiltering) {\n                    //var filterBy = {};\n                    var filterBy = tag;\n                    //filterBy[options.tagsInput.displayProperty] = tags[i];\n                    results = $filter('cnFilter')(results, filterBy);\n                  }\n                  addTags(times)(results);\n                } else if (!options.tagsInput.addFromAutocompleteOnly) {\n                  var _tagsInput$addTag;\n\n                  tagsInput.addTag((_tagsInput$addTag = {}, _defineProperty(_tagsInput$addTag, options.tagsInput.displayProperty, tag), _defineProperty(_tagsInput$addTag, options.tagsInput.valueProperty, tag), _tagsInput$addTag));\n                }\n              } else if (results.then) {\n                results.then(addTags(times));\n              }\n            }\n          });\n        });\n\n        tagsInput.on('input-change', function (value) {\n          if (value || !options.minLength) {\n            suggestionList.load(value, tagsInput.getTags());\n          } else {\n            suggestionList.reset();\n          }\n        }).on('input-focus', function (value) {\n          if (!suggestionList.visible && !options.minLength) {\n            suggestionList.load(value, tagsInput.getTags());\n          }\n        }).on('input-keydown', function (e) {\n          var key, handled;\n\n          if (hotkeys.indexOf(e.keyCode) === -1) {\n            return;\n          }\n\n          // This hack is needed because jqLite doesn't implement stopImmediatePropagation properly.\n          // I've sent a PR to Angular addressing this issue and hopefully it'll be fixed soon.\n          // https://github.com/angular/angular.js/pull/4833\n          var immediatePropagationStopped = false;\n          e.stopImmediatePropagation = function () {\n            immediatePropagationStopped = true;\n            e.stopPropagation();\n          };\n          e.isImmediatePropagationStopped = function () {\n            return immediatePropagationStopped;\n          };\n\n          if (suggestionList.visible) {\n            key = e.keyCode;\n            handled = false;\n\n            if (key === KEYS.down) {\n              suggestionList.selectNext();\n              handled = true;\n            } else if (key === KEYS.up) {\n              suggestionList.selectPrior();\n              handled = true;\n            } else if (key === KEYS.escape) {\n              suggestionList.reset();\n              handled = true;\n            } else if (key === KEYS.enter) {\n              handled = scope.addSuggestion(e);\n            }\n            // adding seems to prevent tab action, need to figure out a way around that before uncommenting\n            //else if(key === KEYS.tab && options.tagsInput.addOnBlur) {\n            //  scope.addSuggestion(e);\n            //}\n\n            if (handled) {\n              e.preventDefault();\n              e.stopImmediatePropagation();\n              scope.$apply();\n            }\n          }\n        }).on('input-blur', function (e) {\n          //changed to use document click or focus, as this fires too soon and cancels\n          //automcomplete click events\n          suggestionList.reset();\n        });\n\n        documentClick = function documentClick(e) {\n          if (e.isDefaultPrevented()) return;\n\n          if (suggestionList.visible) {\n            // if autocomplete option was selected, or click/focus triggered outside of directive\n            if (($(e.target).closest('.suggestion').length || !$(e.target).closest(element[0]).length) && !(e.type === 'blur' && !/^(input|select|textarea|button|a)$/i.test(e.target.tagName))) {\n              suggestionList.reset();\n              if (!/apply|digest/.test(scope.$root.$$phase)) scope.$apply();\n            }\n          }\n        };\n\n        $document.on('click blur', documentClick);\n\n        scope.$on('$destroy', function () {\n          $document.off('click blur', documentClick);\n        });\n      }\n    };\n  }]);\n\n  /**\n   * @ngdoc directive\n   * @name tiTranscludeAppend\n   * @module cnTagsInput\n   *\n   * @description\n   * Re-creates the old behavior of ng-transclude. Used internally by tagsInput directive.\n   */\n  tagsInput.directive('tiTranscludeAppend', function () {\n    return function (scope, element, attrs, ctrl, transcludeFn) {\n      transcludeFn(function (clone) {\n        element.append(clone);\n      });\n    };\n  });\n\n  /**\n   * @ngdoc directive\n   * @name tiAutosize\n   * @module cnTagsInput\n   *\n   * @description\n   * Automatically sets the input's width so its content is always visible. Used internally by tagsInput directive.\n   */\n  tagsInput.directive('tiAutosize', function () {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function link(scope, element, attrs, ctrl) {\n        var THRESHOLD = 3,\n            span,\n            resize;\n\n        span = angular.element('<span class=\"input\"></span>');\n        span.css('display', 'none').css('visibility', 'hidden').css('width', 'auto').css('white-space', 'pre');\n\n        element.parent().append(span);\n\n        resize = function resize(originalValue) {\n          var value = originalValue,\n              width;\n\n          if (angular.isString(value) && value.length === 0) {\n            value = attrs.placeholder;\n          }\n\n          if (value) {\n            span.text(value);\n            span.css('display', '');\n            width = span.prop('offsetWidth');\n            span.css('display', 'none');\n          }\n\n          element.css('width', width ? width + THRESHOLD + 'px' : '');\n\n          return originalValue;\n        };\n\n        ctrl.$parsers.unshift(resize);\n        ctrl.$formatters.unshift(resize);\n\n        attrs.$observe('placeholder', function (value) {\n          if (!ctrl.$modelValue) {\n            resize(value);\n          }\n        });\n      }\n    };\n  });\n\n  /**\n   * @ngdoc service\n   * @name tagsInputConfig\n   * @module cnTagsInput\n   *\n   * @description\n   * Sets global configuration settings for both tagsInput and autoComplete directives. It's also used internally to parse and\n   * initialize options from HTML attributes.\n   */\n  tagsInput.provider('tagsInputConfig', function () {\n    var globalDefaults = {},\n        interpolationStatus = {};\n\n    /**\n     * @ngdoc method\n     * @name setDefaults\n     * @description Sets the default configuration option for a directive.\n     * @methodOf tagsInputConfig\n     *\n     * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput' or 'autoComplete'.\n     * @param {object} defaults Object containing options and their values.\n     *\n     * @returns {object} The service itself for chaining purposes.\n     */\n    this.setDefaults = function (directive, defaults) {\n      globalDefaults[directive] = defaults;\n      return this;\n    };\n\n    /***\n     * @ngdoc method\n     * @name setActiveInterpolation\n     * @description Sets active interpolation for a set of options.\n     * @methodOf tagsInputConfig\n     *\n     * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput' or 'autoComplete'.\n     * @param {object} options Object containing which options should have interpolation turned on at all times.\n     *\n     * @returns {object} The service itself for chaining purposes.\n     */\n    this.setActiveInterpolation = function (directive, options) {\n      interpolationStatus[directive] = options;\n      return this;\n    };\n\n    this.$get = [\"$interpolate\", function ($interpolate) {\n      var converters = {};\n      converters[String] = function (value) {\n        return value;\n      };\n      converters[Number] = function (value) {\n        return parseInt(value, 10);\n      };\n      converters[Boolean] = function (value) {\n        return value.toLowerCase() === 'true';\n      };\n      converters[RegExp] = function (value) {\n        return new RegExp(value);\n      };\n      converters[Object] = function (value) {\n        return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? value : Object(value);\n      };\n\n      return {\n        load: function load(directive, scope, attrs, options) {\n          scope.options = {};\n          scope.attrs = attrs;\n          scope.uid = _.uniqueId();\n\n          angular.forEach(options, function (value, key) {\n            var type, localDefault, converter, getDefault, updateValue;\n\n            type = value[0];\n            localDefault = value[1];\n            converter = converters[type];\n\n            getDefault = function getDefault() {\n              var globalValue = globalDefaults[directive] && globalDefaults[directive][key];\n              return angular.isDefined(globalValue) ? globalValue : localDefault;\n            };\n\n            updateValue = function updateValue(value) {\n              scope.options[key] = value ? converter(value) : getDefault();\n            };\n\n            if (scope[key]) {\n              updateValue(scope[key]);\n            } else if (interpolationStatus[directive] && interpolationStatus[directive][key]) {\n              attrs.$observe(key, function (value) {\n                updateValue(value);\n              });\n            } else {\n              updateValue(attrs[key] && $interpolate(attrs[key])(scope.$parent));\n            }\n          });\n        }\n      };\n    }];\n  });\n\n  /* HTML templates */\n  tagsInput.run([\"$templateCache\", function ($templateCache) {\n    $templateCache.put('cnTagsInput/tags-input.html', '\\n        <ul class=\"list-group cn-autocomplete-list\" \\n            ng-if=\"options.tagsStyle === \\'list\\' && tagList.items.length && !options.hideTags\">\\n          <li class=\"list-group-item {{options.tagClass}}\" \\n              ng-repeat=\"tag in tagList.items\" \\n              ng-class=\"{ selected: tag == tagList.selected }\">\\n            <button ng-if=\"!ngDisabled\" \\n                    ng-click=\"tagList.remove($index)\" \\n                    type=\"button\" class=\"close pull-right\">\\n              <span>&times;</span>\\n            </button>\\n            <span class=\"tag-item\" ng-bind-html=\"getDisplayHtml(tag)\"/> \\n          </li>\\n        </ul>\\n        <div class=\"host clearfix\"\\n             ng-hide=\"showBulk\"\\n             ti-transclude-append=\"\">\\n          <!-- hack to avoid browser\\'s autocomplete -->\\n          <input class=\"offscreen\" \\n                 id=\"fake-{{attrs.id && attrs.id}}-input\" \\n                 name=\"fake-{{attrs.id && attrs.id}}-input\">\\n          <!-- end hack to avoid browser\\'s autocomplete -->\\n          <div class=\"input form-control tags\" \\n               ng-class=\"{focused: hasFocus}\" \\n               ng-disabled=\"ngDisabled\">\\n            <input class=\"input\" \\n                   ng-disabled=\"ngDisabled\"\\n                   id=\"{{attrs.inputId || attrs.id && attrs.id + \\'-input-\\' + uid}}\"\\n                   name=\"{{attrs.inputId || attrs.id && attrs.id + \\'-input-\\' + uid}}\"\\n                   placeholder=\"{{options.placeholder}}\" \\n                   tabindex=\"{{options.tabindex}}\" \\n                   ng-model=\"newTag.text\" \\n                   ng-model-options=\"{updateOn: \\'default\\'}\" \\n                   ng-change=\"newTagChange()\" \\n                   ng-trim=\"false\" \\n                   ng-class=\"{\\n                      \\'invalid-tag\\': newTag.invalid,\\n                      \\'hide-below\\': options.maxTags === 1 && tagList.items.length\\n                   }\" \\n                   ti-autosize=\"\"\\n                   autocomplete=\"off\">\\n            <span class=\"tag-item label {{options.tagClass}} label-block\"\\n                  ng-if=\"options.tagsStyle !== \\'list\\' && !options.hideTags && options.maxTags === 1 && tagList.items.length\"\\n                  title=\"{{getDisplayText(tagList.items[0])}}\">\\n              <span ng-bind-html=\"getDisplayHtml(tagList.items[0])\"/> \\n              <a class=\"remove-button\" \\n                 ng-if=\"!ngDisabled && !options.dropdownIcon\"\\n                 ng-click=\"tagList.remove()\">\\n                <span>&times;</span>\\n              </a>\\n            </span>\\n            <ul class=\"tag-list\" \\n                ng-if=\"options.tagsStyle !== \\'list\\' && !options.hideTags && options.maxTags !== 1\">\\n              <li class=\"tag-item label {{options.tagClass}}\" \\n                  ng-repeat=\"tag in tagList.items\" \\n                  ng-class=\"{ selected: tag == tagList.selected }\">\\n                <span ng-bind-html=\"getDisplayHtml(tag)\"/> \\n                <a class=\"remove-button\" \\n                   ng-if=\"!ngDisabled\"\\n                   ng-click=\"tagList.remove($index)\">\\n                  <span>&times;</span>\\n                </a>\\n              </li>\\n            </ul>\\n            <button ng-if=\"options.showButton && options.dropdownIcon\"\\n                    class=\"btn form-control-icon\" ng-disabled=\"ngDisabled\" tabindex=\"-1\">\\n              <i class=\"{{options.dropdownStyle}}\"></i>\\n            </button>\\n          </div>\\n        </div>\\n        <div class=\"help-block\">\\n          <button class=\"btn btn-default btn-xs\" style=\"border-right: 1px solid #D6D7DB\" ng-show=\"options.allowBulk && !showBulk\" ng-click=\"showBulk = true\">Batch</button>\\n          <button class=\"btn btn-default btn-xs\" ng-show=\"options.showClearAll && tagList.items.length\" ng-click=\"tagList.removeAll()\">Clear</button>\\n        </div>\\n        <div ng-show=\"showBulk\" class=\"clearfix\">\\n          <textarea class=\"form-control\" ng-model=\"bulkTags\" placeholder=\"{{options.bulkPlaceholder}}\"></textarea>\\n          <p class=\"help-block\">\\n            Press \"Enter\" to submit, \"Shift+Enter\" to add a new line\\n          </p>\\n          <div class=\"btn-group help-block\">\\n            <button class=\"btn btn-default btn-xs\" style=\"border-right: 1px solid #D6D7DB\" ng-click=\"showBulk = false\">Cancel</button>\\n          </div>\\n        </div>');\n\n    $templateCache.put('cnTagsInput/auto-complete.html', '\\n        <div ng-if=\"!suggestionList.items.length && !options.groupBy\" \\n             ng-class=\"{open: suggestionList.visible}\">\\n          <ul class=\"autocomplete dropdown-menu\">\\n            <li class=\"dropdown-header\" ng-bind-html=\"suggestionList.visible && noResultsMessage(suggestionList)\"></li>\\n          </ul>\\n        </div>\\n        <div ng-if=\"suggestionList.items.length && isGroups\" \\n             ng-class=\"{open: suggestionList.visible}\">\\n          <ul class=\"autocomplete dropdown-menu\">\\n            <li ng-if=\"!suggestionList.items[0].items.length && !suggestionList.items[1].items.length\" class=\"dropdown-header\">No results...</li>\\n            <li ng-repeat-start=\"group in suggestionList.items\"></li>\\n            <li class=\"dropdown-header\" ng-show=\"group.items.length\">{{group.label | titleCase}}</li>\\n            <li ng-repeat=\"item in group.items\" \\n                class=\"suggestion\" \\n                ng-class=\"{selected: item == suggestionList.selected, disabled: item.disabled}\" \\n                ng-click=\"addSuggestion($event)\" \\n                ng-mouseenter=\"suggestionList.select(group.indexes[$index])\" \\n                ng-bind-html=\"highlight(item, group.label)\">\\n            </li>\\n            <li class=\"divider\" ng-show=\"!$last && $parent.suggestionList.items[$index+1].items.length\"></li>\\n            <li ng-repeat-end></li>\\n          </ul>\\n        </div>\\n        <div ng-if=\"suggestionList.items.length && !isGroups && !options.groupBy\" \\n             ng-class=\"{open: suggestionList.visible}\">\\n          <ul class=\"autocomplete dropdown-menu\">\\n            <li ng-repeat=\"item in suggestionList.items\" \\n                class=\"suggestion\" \\n                ng-class=\"{selected: item == suggestionList.selected, disabled: item.disabled}\" \\n                ng-click=\"addSuggestion($event)\" \\n                ng-mouseenter=\"suggestionList.select($index)\" \\n                ng-bind-html=\"highlight(item)\">\\n            </li>\\n          </ul>\\n        </div>\\n        <div ng-if=\"!isGroups && options.groupBy\" \\n             ng-class=\"{open: suggestionList.visible}\">\\n          <ul class=\"autocomplete dropdown-menu\">\\n            <li ng-repeat-start=\"(group, items) in suggestionList.items\"></li>\\n            <li class=\"dropdown-header\" ng-show=\"items.length\">{{group | titleCase}}</li>\\n            <li ng-repeat=\"item in items\" \\n                class=\"suggestion\" \\n                ng-class=\"{selected: item == suggestionList.selected, disabled: item.disabled}\" \\n                ng-click=\"addSuggestion($event)\" \\n                ng-mouseenter=\"suggestionList.select(suggestionList.items[group].indexes[$index])\" \\n                ng-bind-html=\"highlight(item)\">\\n            </li>\\n            <li class=\"divider\" ng-show=\"!$last && items.length\"></li>\\n            <li ng-repeat-end></li>\\n          </ul>\\n        </div>');\n  }]);\n})();","/*!\n * ngTagsInput v2.0.1\n * http://mbenford.github.io/ngTagsInput\n *\n * Copyright (c) 2013-2014 Michael Benford\n * License: MIT\n *\n * Generated at 2014-04-13 21:25:38 -0300\n */\n(function() {\n  'use strict';\n\n  var KEYS = {\n    backspace: 8,\n    tab: 9,\n    enter: 13,\n    escape: 27,\n    space: 32,\n    up: 38,\n    down: 40,\n    comma: 188\n  };\n\n  function SimplePubSub() {\n    var events = {};\n    return {\n      on: function(names, handler) {\n        names.split(' ').forEach(function(name) {\n          if(!events[name]) {\n            events[name] = [];\n          }\n          events[name].push(handler);\n        });\n        return this;\n      },\n      trigger: function(name, args) {\n        angular.forEach(events[name], function(handler) {\n          handler.call(null, args);\n        });\n        return this;\n      }\n    };\n  }\n\n  function makeObjectArray(array, key, key2) {\n    array = array || [];\n    if(array.length > 0 && !angular.isObject(array[0])) {\n      array.forEach(function(item, index) {\n        array[index] = {\n          [key]: item\n        };\n        if(key2) array[index][key2] = item;\n      });\n    }\n    return array;\n  }\n\n  function getArrayModelVal(array, options) {\n    if(options.arrayValueType === 'object') {\n      return (array || []).map(item => _.isObject(item && item[options.valueProperty]) ? item[options.valueProperty] : item);\n    }\n    else {\n      return _.pluck(array, options.valueProperty);\n    }\n  }\n\n  function findInObjectArray(array, obj, key) {\n    var item = null;\n    var i = 0;\n    var l = array.length;\n\n    if(_.isFunction(key)) {\n      var objVal = key(obj);\n      if(!objVal) return null;\n      for(; i < l; i++) {\n        if(objVal === key(array[i])) {\n          item = array[i];\n          break;\n        }\n      }\n    }\n    else {\n      for(; i < l; i++) {\n        // I'm aware of the internationalization issues regarding toLowerCase()\n        // but I couldn't come up with a better solution right now\n        if(_.has(obj, key) &&\n            _.has(array[i], key) &&\n            (angular.toJson(array[i][key]) + '').toLowerCase() === (angular.toJson(obj[key]) + '').toLowerCase()) {\n          item = array[i];\n          break;\n        }\n      }\n    }\n    return item;\n  }\n\n  function replaceAll(str, substr, newSubstr) {\n    var expression = substr.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n    return str.replace(new RegExp(expression, 'gi'), newSubstr);\n  }\n\n  function matchTagsWithModel(tags, model, options) {\n    //if(tags.length !== model.length) return false;\n    if(!model || !tags || !tags.length) return false;\n\n    if(!_.isArray(model)) {\n      if(options.valueProperty) return angular.equals(model, tags[0][valueProperty]);\n      return angular.equals(model, tags[0]);\n    }\n\n    let array = getArrayModelVal(tags, options);\n    //console.log('array, tags, options:', array, tags, options);\n    return array.some((tag, i) => {\n      //console.log('tag, model[i]:', tag, model[i], angular.equals(tag, model[i]));\n      return angular.equals(tag, model[i]);\n    });\n  }\n\n  function selectAll(input) {\n    if(input.value) {\n      input.setSelectionRange(0, input.value.length);\n    }\n  }\n\n  var tagsInput = angular.module('cnTagsInput', []);\n\n  /**\n   * @ngdoc directive\n   * @name tagsInput\n   * @module cnTagsInput\n   *\n   * @description\n   * Renders an input box with tag editing support.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} [displayProperty=text] Property to be rendered as the tag label.\n   * @param {string=} [valueProperty=value] Property to be used as the value when modelType is not array/object.\n   * @param {number=} tabindex Tab order of the control.\n   * @param {string=} [placeholder=Add a tag] Placeholder text for the control.\n   * @param {number=} [minLength=3] Minimum length for a new tag.\n   * @param {number=} maxLength Maximum length allowed for a new tag.\n   * @param {boolean=} required Sets required validation error key.\n   * @param {number=} minTags Sets minTags validation error key if the number of tags added is less than minTags.\n   * @param {number=} maxTags Sets maxTags validation error key if the number of tags added is greater than maxTags.\n   * @param {boolean=} [allowLeftoverText=false] Sets leftoverText validation error key if there is any leftover text in\n   *                                             the input element when the directive loses focus.\n   * @param {string=} [removeTagSymbol=×] Symbol character for the remove tag button.\n   * @param {boolean=} [addOnEnter=true] Flag indicating that a new tag will be added on pressing the ENTER key.\n   * @param {boolean=} [addOnSpace=false] Flag indicating that a new tag will be added on pressing the SPACE key.\n   * @param {boolean=} [addOnComma=true] Flag indicating that a new tag will be added on pressing the COMMA key.\n   * @param {boolean=} [addOnBlur=false] Flag indicating that a new tag will be added when the input field loses focus.\n   * @param {boolean=} [clearOnBlur=false] Flag indicating whether to clear the typed text when the input field loses focus.\n   * @param {boolean=} [replaceSpacesWithDashes=false] Flag indicating that spaces will be replaced with dashes.\n   * @param {string=} [allowedTagsPattern=.+] Regular expression that determines whether a new tag is valid.\n   * @param {boolean=} [enableEditingLastTag=false] Flag indicating that the last tag will be moved back into\n   *                                                the new tag input box instead of being removed when the backspace key\n   *                                                is pressed and the input box is empty.\n   * @param {boolean=} [addFromAutocompleteOnly=false] Flag indicating that only tags coming from the autocomplete list will be allowed.\n   *                                                   When this flag is true, addOnEnter, addOnComma, addOnSpace, addOnBlur and\n   *                                                   allowLeftoverText values are ignored.\n   * @param {expression} onBeforeTagAdded Expression to evaluate upon adding a new tag. The new tag is available as $tag.\n   * @param {expression} onBeforeTagRemoved Expression to evaluate upon removing an existing tag. The removed tag is available as $tag.\n   * @param {expression} onBeforeTagChanged Expression to evaluate upon adding or removing a tag. The affected tag is available as $tag. Prev value avialble as $prev.\n   * @param {expression} onTagAdded Expression to evaluate upon adding a new tag. The new tag is available as $tag.\n   * @param {expression} onTagRemoved Expression to evaluate upon removing an existing tag. The removed tag is available as $tag.\n   * @param {expression} onTagChanged Expression to evaluate upon adding or removing a tag. The affected tag is available as $tag. Prev value avialble as $prev.\n   * @param {expression} onInit Expression to evaluate upon initializing model value.\n   * @param {string} modelType Defines ngModel type, if anything other than array, model is set to first tag in list\n   * @param {string} arrayValueType Defines ngModel[] type, if anything other than object, value is set mapped from object's values\n   * @param {boolean=} [hideTags=false] Flag indicating whether to hide tag list (for manually displaying tag list in other way)\n   * @param {boolean=} [dropdownIcon=false] Flag to show icon on right side\n   * @param {string=} [tagsStyle='tags'] Default tags style\n   */\n  tagsInput.directive('tagsInput', [\n    \"$timeout\", \"$document\", \"tagsInputConfig\", \"$sce\", \"$rootScope\",\n    function($timeout, $document, tagsInputConfig, $sce, $rootScope) {\n      function TagList(options, events) {\n        var self = {}, getTagText, setTagText, tagIsValid;\n\n        //getTagText = function(tag) {\n        //  if(!_.isObject(tag)) return tag;\n        //  return tag[options.displayProperty];\n        //};\n\n        getTagText = options.getTagText = function(tag) {\n          if(!_.isObject(tag)) return tag;\n          return options.itemFormatter ? options.itemFormatter(tag) : tag[options.displayProperty];\n        };\n\n        setTagText = function(tag, text) {\n          // only create tag object when not adding from auto-complete\n          if(tag[options.displayProperty]) return;\n\n          tag[options.displayProperty] = text;\n          if(options.valueProperty && !_.has(tag, options.valueProperty)) {\n            tag[options.valueProperty] = text;\n          }\n        };\n\n        tagIsValid = function(tag) {\n          var tagText = getTagText(tag) + '';\n\n          return (!options.minLength || tagText.length >= options.minLength) &&\n                 (!options.maxLength || tagText.length <= options.maxLength) &&\n                 options.allowedTagsPattern.test(tagText) &&\n                 !findInObjectArray(\n                     self.items,\n                     tag,\n                     //_.has(tag, options.valueProperty) ? options.valueProperty : getTagText\n                     options.valueProperty || getTagText\n                 );\n        };\n\n        self.items = [];\n\n        self.addText = function(text) {\n          var tag = {};\n          setTagText(tag, text);\n          self.add(tag);\n        };\n\n        self.add = function(tag) {\n          if(tag.disabled) return;\n\n          var tagText = getTagText(tag);\n\n          if(tagText.trim) tagText = tagText.trim();\n\n          if(options.replaceSpacesWithDashes) {\n            tagText = tagText.replace(/\\s/g, '-');\n          }\n\n          setTagText(tag, tagText);\n\n          if(tagIsValid(tag)) {\n            if(options.maxTags && self.items.length >= options.maxTags) {\n              self.items.pop();\n              events.trigger('tag-removed', {$tag: tag, $event: 'tag-removed'});\n            }\n            self.items.push(tag);\n            events.trigger('tag-added', {$tag: tag, $event: 'tag-added'});\n          }\n          else {\n            events.trigger('invalid-tag', {$tag: tag, $event: 'invalid-tag'});\n          }\n\n          return tag;\n        };\n\n        self.remove = function(index) {\n          var tag = self.items.splice(index, 1)[0];\n          events.trigger('tag-removed', {$tag: tag, $event: 'tag-removed'});\n          return tag;\n        };\n\n        self.removeLast = function() {\n          var tag, lastTagIndex = self.items.length - 1;\n\n          if(options.enableEditingLastTag || self.selected) {\n            self.selected = null;\n            tag = self.remove(lastTagIndex);\n          }\n          else if(!self.selected) {\n            self.selected = self.items[lastTagIndex];\n          }\n\n          return tag;\n        };\n\n        self.removeAll = function() {\n          var tags = self.items.splice(0, self.items.length);\n          tags.forEach(function(tag) {\n            events.trigger('tag-removed', {$tag: tag, $event: 'tag-removed'});\n          });\n        };\n\n        return self;\n      }\n\n      return {\n        restrict: 'E',\n        require: 'ngModel',\n        scope: {\n          tags: '=ngModel',\n          itemFormatter: '=',\n          ngDisabled: '=',\n          onBeforeTagAdded: '&',\n          onBeforeTagRemoved: '&',\n          onBeforeTagChanged: '&',\n          onTagAdded: '&',\n          onTagRemoved: '&',\n          onTagChanged: '&',\n          onInit: '&',\n          newTag: '=?'\n        },\n        replace: false,\n        transclude: true,\n        templateUrl: 'cnTagsInput/tags-input.html',\n        controller: [\"$scope\", \"$attrs\", \"$element\", function($scope, $attrs, $element) {\n          tagsInputConfig.load('tagsInput', $scope, $attrs, {\n            placeholder: [String, ''],\n            tabindex: [Number],\n            removeTagSymbol: [String, String.fromCharCode(215)],\n            replaceSpacesWithDashes: [Boolean, false],\n            minLength: [Number, 2],\n            maxLength: [Number],\n            addOnEnter: [Boolean, true],\n            addOnSpace: [Boolean, false],\n            addOnComma: [Boolean, true],\n            addOnBlur: [Boolean, false],\n            clearOnBlur: [Boolean, false],\n            allowedTagsPattern: [RegExp, /.+/],\n            enableEditingLastTag: [Boolean, false],\n            required: [Boolean, false],\n            minTags: [Number],\n            maxTags: [Number],\n            displayProperty: [String, 'text'],\n            valueProperty: [String],\n            allowLeftoverText: [Boolean, false],\n            addFromAutocompleteOnly: [Boolean, false],\n            //tagClasses: [Object, null],\n            tagClass: [String, ''],\n            modelType: [String, 'array'],\n            arrayValueType: [String, 'object'],\n            hideTags: [Boolean, false],\n            dropdownIcon: [Boolean, false],\n            tagsStyle: [String, 'tags'],\n            allowBulk: [Boolean, false],\n            bulkDelimiter: [RegExp, /, ?|\\n/],\n            bulkPlaceholder: [String, 'Enter a list separated by commas or new lines'],\n            showClearAll: [Boolean, false],\n            showButton: [Boolean, false]\n          });\n\n          var options = $scope.options;\n\n          if(!options.valueProperty &&\n              (!/object|array/.test(options.modelType) || options.arrayValueType !== 'object')) {\n            options.valueProperty = 'value';\n          }\n\n          if($scope.itemFormatter) options.itemFormatter = $scope.itemFormatter;\n\n          if(options.tagsStyle === 'tags') {\n            options.tagClass = options.tagClass || 'label-primary';\n          }\n\n          if(options.allowBulk && (options.modelType !== 'array' || options.maxTags === 1)) {\n            options.allowBulk = false;\n          }\n\n          $scope.events = new SimplePubSub();\n          $scope.tagList = new TagList(options, $scope.events);\n\n          this.registerAutocomplete = function() {\n            var input = options.input = $element.find('input.input');\n            input.on('keydown', function(e) {\n              $scope.events.trigger('input-keydown', e);\n            });\n\n            return {\n              addTag: function(tag) {\n                return $scope.tagList.add(tag);\n              },\n              focusInput: function() {\n                input[0].focus();\n              },\n              blurInput: function() {\n                input[0].blur();\n              },\n              getTags: function() {\n                return $scope.tagList.items;\n              },\n              getOptions: function() {\n                return options;\n              },\n              on: function(name, handler) {\n                $scope.events.on(name, handler);\n                return this;\n              },\n              registerProcessBulk: function(fn) {\n                $scope.processBulk = function() {\n                  fn($scope.bulkTags).then(function() {\n                    $scope.showBulk = false;\n                    $scope.bulkTags = '';\n                  });\n                };\n              }\n            };\n          };\n        }],\n        link: function(scope, element, attrs, ngModelCtrl) {\n          var hotkeys = [KEYS.enter, KEYS.comma, KEYS.space, KEYS.backspace],\n              tagList = scope.tagList,\n              events = scope.events,\n              options = scope.options,\n              input = element.find('input.input'),\n              blurTimeout;\n\n          if(attrs.inputId && !ngModelCtrl.$name) {\n            ngModelCtrl.$name = attrs.inputId;\n          }\n\n          // before callbacks allow code to modify tag before it's added\n          // after callback fired after ngModel has chance to update\n          function beforeAndAfter(before, after) {\n            return function() {\n              var args = arguments;\n              before.apply(this, args);\n              $timeout(function(){\n                after.apply(this, args);\n              });\n            };\n          }\n\n          events\n              .on('tag-added', beforeAndAfter(scope.onBeforeTagAdded, scope.onTagAdded))\n              .on('tag-removed', beforeAndAfter(scope.onBeforeTagRemoved, scope.onTagRemoved))\n              .on('tag-changed', beforeAndAfter(scope.onBeforeTagChanged, scope.onTagChanged))\n              .on('tag-init', scope.onInit)\n              .on('tag-added tag-removed', function(e) {\n                if(!options.maxTags || options.maxTags > scope.tagList.items.length) {\n                  selectAll(options.input[0]);\n                }\n                else {\n                  scope.newTag.text = '';\n                }\n                if(options.modelType === 'array') {\n                  //if(options.arrayValueType === 'object') {\n                  if(!options.valueProperty) {\n                    scope.tags = scope.tagList.items;\n                  }\n                  else {\n                    scope.tags = getArrayModelVal(scope.tagList.items, options);\n                    //console.log('on:tag-added:scope.tags:', scope.tags);\n                  }\n                }\n                else {\n                  if(e.$event === 'tag-removed') {\n                    //ngModelCtrl.$setViewValue(undefined);\n                    scope.tags = undefined;\n                  }\n                  else {\n                    //if(options.modelType === 'object') {\n                    if(!options.valueProperty) {\n                      //ngModelCtrl.$setViewValue(e.$tag);\n                      scope.tags = e.$tag;\n                    }\n                    else {\n                      //ngModelCtrl.$setViewValue(e.$tag.value);\n                      scope.tags = _.has(e.$tag, options.valueProperty) ?\n                          e.$tag[options.valueProperty] : e.$tag[options.displayProperty];\n                    }\n                    //scope.tags = [e.$tag];\n                  }\n                }\n              })\n              .on('invalid-tag', function() {\n                scope.newTag.invalid = true;\n              })\n              .on('input-change', function() {\n                tagList.selected = null;\n                scope.newTag.invalid = null;\n              })\n              .on('input-focus', function() {\n                ngModelCtrl.$setValidity('leftoverText', true);\n              })\n              .on('input-blur', function() {\n                if(!options.addFromAutocompleteOnly) {\n                  if(options.addOnBlur && scope.newTag.text) {\n                    tagList.addText(scope.newTag.text);\n                  }\n\n                  //ngModelCtrl.$setValidity('leftoverText', options.allowLeftoverText ? true : !scope.newTag.text);\n                }\n\n                // Reset newTag\n                if(options.clearOnBlur) {\n                  scope.newTag.text = '';\n                  scope.newTag.invalid = null;\n                }\n              });\n\n          scope.newTag = {text: '', invalid: null};\n\n          scope.getDisplayText = scope.itemFormatter || function(tag) {\n            return tag && ((tag[options.displayProperty] || 'undefined') + '').trim();\n          };\n\n          scope.getDisplayHtml = function(tag) {\n            return $sce.trustAsHtml(scope.getDisplayText(tag));\n          };\n\n          scope.track = function(tag) {\n            return tag[options.displayProperty];\n          };\n\n          scope.newTagChange = function() {\n            events.trigger('input-change', scope.newTag.text);\n          };\n\n          scope.processBulk = scope.processBulk || function() {\n            var tags = scope.bulkTags.split(options.bulkDelimiter);\n            _.each(tags, function(text) {\n              var tag = {};\n              tag[options.displayProperty] = text;\n              scope.tagList.add(tag);\n            });\n            scope.showBulk = false;\n            scope.bulkTags = '';\n          };\n\n          var first = true;\n\n          scope.triggerInit = function(value, prev) {\n            //console.log('triggerInit:', value, options.valueProperty);\n            var criteria = options.valueProperty ? {[options.valueProperty]: value} : value;\n            if(!tagList.items.length || !_.find(tagList.items, criteria)) {\n              events.trigger('tag-init', {\n                $tag: value,\n                $prev: prev,\n                $event: 'tag-init',\n                $setter: function(val) {\n                  //console.log('$setter:', val, options.valueProperty);\n                  if(val && !_.isObject(val)) {\n                    tagList.items = [{\n                      [options.displayProperty]: val,\n                      [options.valueProperty]: val\n                    }];\n                  }\n                  else {\n                    tagList.items = _.isArray(val) ? val : [val];\n                  }\n                  return tagList.items;\n                }\n              });\n            }\n          };\n\n          scope.$watch('tags', function(value, prev) {\n            var changed = !angular.equals(value, prev);\n            var init    = !changed && first;\n            //console.log('$watch:tags:', value, prev, changed, init);\n\n            if(init) {\n              scope.triggerInit(value, prev);\n            }\n            if(changed) {\n              events.trigger('tag-changed', {\n                $tag: value,\n                $prev: prev,\n                $event: 'tag-changed'\n              });\n            }\n\n            if(options.modelType === 'array') {\n              if(_.isArray(value)) {\n                if(value.length) {\n                  //console.log('on:tags:', value, tagList.items, options.valueProperty);\n                  if(!matchTagsWithModel(tagList.items, scope.tags, options)) {\n                    scope.triggerInit(value, prev);\n                  }\n                  if(!matchTagsWithModel(tagList.items, scope.tags, options) || tagList.items.length !== scope.tags.length) {\n                    tagList.items = makeObjectArray(value, options.displayProperty, options.valueProperty);\n                    scope.tags = getArrayModelVal(tagList.items, options);\n                    //console.log('on:tags:scope.tags:', scope.tags);\n                    return;\n                  }\n                }\n                else {\n                  tagList.items = [];\n                  if(angular.isUndefined(prev)) return;\n                }\n              }\n              else if(value === undefined) {\n                tagList.items = [];\n                scope.tags = [];\n                return;\n              }\n            }\n            else if(angular.isDefined(value)) {\n              if(_.isArray(value)) {\n                if(value.length) {\n                  //if(options.modelType === 'object') {\n                  if(!options.valueProperty) {\n                    scope.tags = value[0];\n                  }\n                  else {\n                    scope.tags = value[0][options.valueProperty];\n                  }\n\n                  return;\n                }\n                else {\n                  scope.tags = undefined;\n                }\n              }\n              else {\n                if(options.modelType === 'object') {\n                  if(value !== null) tagList.items = [value];\n                }\n                else {\n                  if(_.isObject(value)) {\n                    tagList.items = [value];\n\n                    var val = value[options.valueProperty];\n                    if(_.isUndefined(val)) val = value[options.displayProperty];\n                    scope.tags = val;\n\n                    return;\n                  }\n                  else if(!_.isUndefined(value) &&\n                      (!tagList.items.length || tagList.items[0][options.valueProperty] !== value)) {\n                    scope.triggerInit(value, prev);\n                  }\n                  //else {\n                  //  var val = _.first(_.pluck(tagList.items, options.valueProperty));\n                  //  if(!val && val !== 0) val = _.first(_.pluck(tagList.items, options.displayProperty));\n                  //  if(val !== value) {\n                  //    var newTag = {};\n                  //    newTag[options.valueProperty] = value;\n                  //    tagList.items = [];\n                  //  }\n                    // todo: why were we overriding scope.tags? This will lead to recursion\n                    //scope.tags = val;\n                  //}\n                }\n              }\n            }\n            else if(!value && tagList.items.length) {\n              tagList.items = [];\n            }\n\n            if(!init && changed) {\n              ngModelCtrl.$setDirty();\n            }\n\n            // hack because schemaForm is incorrectly invalidating model sometimes\n            ngModelCtrl.$setValidity('schemaForm', true);\n            if(options.modelType === 'array') {\n              ngModelCtrl.$setValidity('tv4-401', value && options.maxTags ? value.length <= options.maxTags : true);\n              ngModelCtrl.$setValidity('tv4-302', value ? angular.isDefined(options.minTags) ? value.length >= options.minTags : true : false);\n            }\n            else {\n              ngModelCtrl.$setValidity('tv4-302', !options.required || !(angular.isUndefined(value)));\n            }\n\n            first = false;\n\n          }, true);\n\n          // stupid ugly hack to fix order between input and autocomplete events\n          $timeout(() => {\n            input\n              .on('keydown', function(e) {\n                // This hack is needed because jqLite doesn't implement stopImmediatePropagation properly.\n                // I've sent a PR to Angular addressing this issue and hopefully it'll be fixed soon.\n                // https://github.com/angular/angular.js/pull/4833\n                if(e.isImmediatePropagationStopped && e.isImmediatePropagationStopped()) {\n                  return;\n                }\n\n                var key = e.keyCode,\n                    isModifier = e.shiftKey || e.altKey || e.ctrlKey || e.metaKey,\n                    addKeys = {},\n                    shouldAdd, shouldRemove;\n\n                if(isModifier || hotkeys.indexOf(key) === -1) {\n                  return;\n                }\n\n                addKeys[KEYS.enter] = options.addOnEnter;\n                addKeys[KEYS.comma] = options.addOnComma;\n                addKeys[KEYS.space] = options.addOnSpace;\n\n                shouldAdd = !options.addFromAutocompleteOnly && addKeys[key];\n                shouldRemove = !shouldAdd && key === KEYS.backspace && scope.newTag.text.length === 0;\n\n                if(shouldAdd) {\n                  tagList.addText(scope.newTag.text);\n\n                  scope.$apply();\n                  e.preventDefault();\n                }\n                else if(shouldRemove) {\n                  var tag = tagList.removeLast();\n                  if(tag && options.enableEditingLastTag) {\n                    scope.newTag.text = tag[options.displayProperty];\n                  }\n\n                  scope.$apply();\n                  e.preventDefault();\n                }\n              })\n              .on('focus', onFocus)\n              .on('blur', function(e) {\n                blurTimeout = $timeout(function() {\n                  var activeElement = $document.prop('activeElement'),\n                      lostFocusToBrowserWindow = activeElement === input[0],\n                      lostFocusToChildElement = element.find('.host')[0].contains(activeElement);\n\n                  if(lostFocusToBrowserWindow || !lostFocusToChildElement) {\n                    scope.hasFocus = false;\n                    events.trigger('input-blur', e);\n                  }\n                }, 150); // timeout so that click event triggers first\n              });\n          });\n\n          element.find('textarea').on('keydown', function(e) {\n            if(e.keyCode === KEYS.enter) {\n              if(!e.altKey && !e.ctrlKey && !e.metaKey && !e.shiftKey) {\n                e.preventDefault();\n                scope.processBulk();\n              }\n            }\n          });\n\n          element.find('div').on('click', function(e) {\n            if(!$(e.target).closest('.suggestion').length) {\n              e.preventDefault();\n              input[0].focus();\n            }\n          });\n\n          function onFocus(e) {\n            if(e) e.preventDefault();\n            if(scope.ngDisabled) return;\n\n            selectAll(e.target);\n\n            if(blurTimeout) $timeout.cancel(blurTimeout);\n\n            scope.hasFocus = true;\n            events.trigger('input-focus', input.val());\n\n            if(!/apply|digest/.test(scope.$root.$$phase)) scope.$apply();\n          }\n        }\n      };\n    }]);\n\n  /**\n   * @ngdoc directive\n   * @name autoComplete\n   * @module cnTagsInput\n   *\n   * @description\n   * Provides autocomplete support for the tagsInput directive.\n   *\n   * @param {expression} source Expression to evaluate upon changing the input content. The input value is available as\n   *                            $query. The result of the expression must be a promise that eventually resolves to an\n   *                            array of strings.\n   * @param {number=} [debounceDelay=100] Amount of time, in milliseconds, to wait before evaluating the expression in\n   *                                      the source option after the last keystroke.\n   * @param {number=} [minLength=3] Minimum number of characters that must be entered before evaluating the expression\n   *                                 in the source option.\n   * @param {boolean=} [highlightMatchedText=true] Flag indicating that the matched text will be highlighted in the\n   *                                               suggestions list.\n   * @param {number=} [maxResultsToShow=10] Maximum number of results to be displayed at a time.\n   */\n  tagsInput.directive('autoComplete', [\n    \"$document\", \"$timeout\", \"$filter\", \"$sce\", \"tagsInputConfig\", \"$parse\", 'Api',\n    function($document, $timeout, $filter, $sce, tagsInputConfig, $parse, Api) {\n      function SuggestionList(scope, options) {\n        var self = {}, debouncedLoadId, getDifference, lastPromise, groupList,\n            splitListItems, formatItemText, mapIndexes;\n        \n\n        groupList = function(list, groupBy) {\n          var filtered = {},\n              map = [],\n              index = 0,\n              keys;\n\n          // loop through each item in the list\n          _.each(list, function(item) {\n            keys = $parse(groupBy)(item);\n            if(!_.isArray(keys)) keys = [keys];\n            _.each(keys, function(key) {\n              if(!filtered[key]) {\n                filtered[key] = [];\n              }\n              filtered[key].push(item);\n            });\n          });\n\n          _.each(filtered, function(group) {\n            group.indexes = [];\n            _.each(group, function(item) {\n              group.indexes.push(index++);\n              map.push(item);\n            });\n          });\n\n          return {\n            groups: filtered,\n            map: map\n          };\n        };\n\n        formatItemText = function(item, formatter) {\n          if(formatter) {\n            if(!_.isArray(formatter)) {\n              formatter = [formatter, {}];\n            }\n            return $parse(formatter[0])((formatter[1].val = item) && formatter[1]);\n          }\n\n          return item;\n        };\n\n        splitListItems = function(items) {\n          var keys = [];\n\n          function addItem(key, item, group, prop) {\n            var text = _.isObject(item) ? item[prop || options.tagsInput.displayProperty] : item,\n                toAdd = {\n                  text: formatItemText(text, group.formatter),\n                  value: text,\n                  key: key,\n                  childKey: prop/*,\n                  tagClass: options.tagClasses && options.tagClasses[key] || options.tagClass*/\n                };\n\n            if(!_.find(group.items, toAdd)) {\n              group.items.push(toAdd);\n            }\n          }\n\n          _.each(scope.searchKeys, function(group) {\n            var key = group.key;\n            group.items = [];\n\n            _.each(items, function(item) {\n              if(item[key]) {\n                if(_.isArray(item[key])) {\n                  _.each(item[key], function(child) {\n                    addItem(key, child, group, group.childKey);\n                  });\n                }\n                else {\n                  addItem(key, item[key], group, group.childKey);\n                }\n              }\n            });\n            keys.push(group);\n          });\n\n          return keys;\n        };\n\n        mapIndexes = function(items) {\n          var map = [],\n              index = 0;\n\n          _.each(items, function(group) {\n            group.indexes = [];\n            _.each(group.items, function(item) {\n              group.indexes.push(index++);\n              map.push(item);\n            });\n          });\n\n          return map;\n        };\n\n        getDifference = function(array1, array2) {\n          if(!array2.length) {\n            return array1.filter(function(item) {\n              return item[options.tagsInput.displayProperty] !== '';\n            });\n          }\n          return array1.filter(function(item) {\n            return !findInObjectArray(\n                array2,\n                item,\n                //_.has(item, options.tagsInput.valueProperty) ? options.tagsInput.valueProperty : options.tagsInput.getTagText\n                options.tagsInput.valueProperty || options.tagsInput.getTagText\n            );\n          });\n        };\n\n        self.reset = function() {\n          lastPromise = null;\n\n          self.items = [];\n          self.visible = false;\n          self.index = -1;\n          self.selected = null;\n          self.query = null;\n\n          $timeout.cancel(debouncedLoadId);\n        };\n\n        self.show = function() {\n          self.selected = null;\n          self.visible = true;\n          self.select(0);\n        };\n\n        self.load = function(query, tags) {\n          if(query.length < options.minLength) {\n            self.reset();\n            return;\n          }\n\n          var promise,\n              //filterBy = {},\n              filterBy = query,\n              groups,\n              processItems = function(items) {\n                if(promise && promise !== lastPromise) {\n                  return;\n                }\n\n                if(scope.searchKeys) {\n                  scope.isGroups = true;\n                  //filterBy = query;\n                  items = splitListItems(items);\n                }\n                if(_.isObject(items) && !_.isArray(items)) {\n                  scope.isGroups = true;\n                  items = _.map(items, function(list, group) {\n                    return {\n                      items: list,\n                      label: group\n                    };\n                  });\n                }\n                if(scope.isGroups) {\n                  _.each(items, function(group) {\n                    group.items = getDifference(group.items, tags);\n                    if(query) group.items = $filter('cnFilter')(group.items, filterBy);\n\n                    group.items = group.items.slice(0, options.maxResultsToShow);\n                  });\n                  self.itemMap = mapIndexes(items);\n                }\n                else {\n                  //filterBy[options.tagsInput.displayProperty] = query;\n                  items = makeObjectArray(items.data || items, options.tagsInput.displayProperty);\n                  items = getDifference(items, tags);\n                  if(query && !options.skipFiltering) {\n                    items = $filter('cnFilter')(items, filterBy);\n                  }\n\n                  items = items.slice(0, options.maxResultsToShow);\n\n                  if(options.groupBy) {\n                    groups = groupList(items, options.groupBy);\n                    items = groups.groups;\n                    self.itemMap = groups.map;\n                  }\n                }\n\n                self.items = items;\n\n                /*\n                if(!_.isEmpty(self.items)) {\n                  self.show();\n                }\n                else {\n                  self.reset();\n                }\n                */\n                self.show();\n              };\n\n          $timeout.cancel(debouncedLoadId);\n          self.query = query;\n          debouncedLoadId = $timeout(function() {\n            var source = scope.source({$query: query});\n            if(_.isArray(source)) {\n              $timeout(function() {\n                processItems(source || []);\n              });\n            }\n            else {\n              if(!options.minLength) {\n                source.then(function(results) {\n                  scope.source = function() {\n                    return results;\n                  };\n                  processItems(results || []);\n                });\n              }\n              else {\n                promise = source;\n                lastPromise = promise;\n                promise.then(processItems);\n              }\n            }\n          }, options.minLength ? options.debounceDelay : 0, false);\n        };\n\n        self.selectNext = function() {\n          self.select(++self.index);\n        };\n\n        self.selectPrior = function() {\n          self.select(--self.index);\n        };\n\n        self.select = function(index) {\n          var list = self.itemMap || self.items;\n          if(index < 0) {\n            index = list.length - 1;\n          }\n          else if(index >= list.length) {\n            index = 0;\n          }\n          self.index = index;\n          if(self.itemMap) {\n            self.selected = self.itemMap[index];\n          }\n          else {\n            self.selected = self.items[index];\n          }\n        };\n\n        //self.reset();\n\n        return self;\n      }\n\n      function encodeHTML(value) {\n        return value ? value\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;') : '';\n      }\n\n      return {\n        restrict: 'E',\n        require: '^tagsInput',\n        scope: {\n          source: '&',\n          searchKeys: '=?'\n        },\n        templateUrl: function(elem, attrs) {\n          return attrs.customTemplateUrl || 'cnTagsInput/auto-complete.html';\n        },\n        link: function(scope, element, attrs, tagsInputCtrl) {\n          var hotkeys = [KEYS.enter, KEYS.tab, KEYS.escape, KEYS.up, KEYS.down],\n              suggestionList, tagsInput, options, getItemText, documentClick;\n\n          tagsInputConfig.load('autoComplete', scope, attrs, {\n            debounceDelay: [Number, 250],\n            minLength: [Number, 3],\n            highlightMatchedText: [Boolean, true],\n            maxResultsToShow: [Number, 75],\n            groupBy: [String, ''],\n            skipFiltering: [Boolean, false]\n          });\n\n          options = scope.options;\n\n          tagsInput = tagsInputCtrl.registerAutocomplete();\n          options.tagsInput = tagsInput.getOptions();\n\n          if(options.minLength === 0/* && _.isArray(scope.source())*/) {\n            options.tagsInput.dropdownIcon = true;\n            if(options.tagsInput.maxTags === 1) {\n              options.tagsInput.dropdownStyle = 'caret';\n            }\n            else {\n              options.tagsInput.dropdownStyle = 'fa fa-plus';\n            }\n          }\n          else {\n            options.tagsInput.dropdownStyle = 'fa fa-search';\n          }\n\n          suggestionList = new SuggestionList(scope, options);\n\n          getItemText = options.tagsInput.itemFormatter || function(item) {\n            return String(item[options.tagsInput.displayProperty]);\n          };\n\n          scope.suggestionList = suggestionList;\n\n          scope.addSuggestion = function(e) {\n            e.preventDefault();\n\n            //selectAll(e.target);\n\n            var added = false;\n\n            if(suggestionList.selected) {\n              tagsInput.addTag(angular.copy(suggestionList.selected));\n\n              if(!options.tagsInput.maxTags || tagsInput.getTags().length < options.tagsInput.maxTags) {\n                var i = suggestionList.items.indexOf(suggestionList.selected);\n                suggestionList.items.splice(i, 1);\n                suggestionList.select(i);\n                tagsInput.focusInput();\n              }\n              else {\n                suggestionList.reset();\n                tagsInput.blurInput();\n              }\n\n              added = true;\n            }\n            return added;\n          };\n\n          scope.highlight = function(item, key) {\n            var text = getItemText(item, key);\n            //text = encodeHTML(text);\n            if(suggestionList.query && options.highlightMatchedText) {\n              //text = replaceAll(text, encodeHTML(suggestionList.query), '<b>$&</b>');\n              text = replaceAll(text, suggestionList.query, '<b>$&</b>');\n            }\n            return $sce.trustAsHtml('<a>' + text + '</a>');\n          };\n\n          scope.track = function(item, key) {\n            return getItemText(item, key);\n          };\n\n          scope.noResultsMessage = function({visible, query}) {\n            if(!query) return 'No options...';\n            return $sce.trustAsHtml(`No results for <b>${query}</b>...`);\n          };\n\n          tagsInput.registerProcessBulk(function(bulkTags) {\n            var tags = bulkTags.split(options.tagsInput.bulkDelimiter);\n\n            var addTags = function(i) {\n              return function(data) {\n                _.times(i, function(i) {\n                  if(data[i]) tagsInput.addTag(data[i]);\n                });\n              };\n            };\n\n            // in case a query is involved...doesn't hurt to use even if not\n            return Api.batch(function() {\n              for(var i = 0, l = tags.length; i < l; i++) {\n                if(options.tagsInput.maxTags && tagsInput.getTags().length >= options.tagsInput.maxTags) break;\n                var tag = tags[i];\n                var times = 1;\n                var multiple = tags[i].match(/(.*) ?\\((\\d+)\\)$/);\n\n                if(multiple) {\n                  tag = multiple[1];\n                  times = parseInt(multiple[2]);\n                }\n\n                var results = scope.source({$query: tag});\n\n                if(_.isArray(results)) {\n                  if(results.length) {\n                    if(!options.skipFiltering) {\n                      //var filterBy = {};\n                      var filterBy = tag;\n                      //filterBy[options.tagsInput.displayProperty] = tags[i];\n                      results = $filter('cnFilter')(results, filterBy);\n                    }\n                    addTags(times)(results);\n                  }\n                  else if(!options.tagsInput.addFromAutocompleteOnly) {\n                    tagsInput.addTag({\n                      [options.tagsInput.displayProperty]: tag,\n                      [options.tagsInput.valueProperty]: tag\n                    });\n                  }\n                }\n                else if(results.then) {\n                  results.then(addTags(times));\n                }\n              }\n            });\n          });\n\n          tagsInput\n              .on('input-change', function(value) {\n                if(value || !options.minLength) {\n                  suggestionList.load(value, tagsInput.getTags());\n                }\n                else {\n                  suggestionList.reset();\n                }\n              })\n              .on('input-focus', function(value) {\n                if(!suggestionList.visible && !options.minLength) {\n                  suggestionList.load(value, tagsInput.getTags());\n                }\n              })\n              .on('input-keydown', function(e) {\n                var key, handled;\n\n                if(hotkeys.indexOf(e.keyCode) === -1) {\n                  return;\n                }\n\n                // This hack is needed because jqLite doesn't implement stopImmediatePropagation properly.\n                // I've sent a PR to Angular addressing this issue and hopefully it'll be fixed soon.\n                // https://github.com/angular/angular.js/pull/4833\n                var immediatePropagationStopped = false;\n                e.stopImmediatePropagation = function() {\n                  immediatePropagationStopped = true;\n                  e.stopPropagation();\n                };\n                e.isImmediatePropagationStopped = function() {\n                  return immediatePropagationStopped;\n                };\n\n                if(suggestionList.visible) {\n                  key = e.keyCode;\n                  handled = false;\n\n                  if(key === KEYS.down) {\n                    suggestionList.selectNext();\n                    handled = true;\n                  }\n                  else if(key === KEYS.up) {\n                    suggestionList.selectPrior();\n                    handled = true;\n                  }\n                  else if(key === KEYS.escape) {\n                    suggestionList.reset();\n                    handled = true;\n                  }\n                  else if(key === KEYS.enter) {\n                    handled = scope.addSuggestion(e);\n                  }\n                  // adding seems to prevent tab action, need to figure out a way around that before uncommenting\n                  //else if(key === KEYS.tab && options.tagsInput.addOnBlur) {\n                  //  scope.addSuggestion(e);\n                  //}\n\n                  if(handled) {\n                    e.preventDefault();\n                    e.stopImmediatePropagation();\n                    scope.$apply();\n                  }\n                }\n              })\n              .on('input-blur', function(e) {\n                //changed to use document click or focus, as this fires too soon and cancels\n                //automcomplete click events\n                suggestionList.reset();\n              });\n\n          documentClick = function(e) {\n            if(e.isDefaultPrevented()) return;\n\n            if(suggestionList.visible) {\n              // if autocomplete option was selected, or click/focus triggered outside of directive\n              if(($(e.target).closest('.suggestion').length || !$(e.target).closest(element[0]).length) &&\n                  !(e.type === 'blur' && !/^(input|select|textarea|button|a)$/i.test(e.target.tagName))) {\n                suggestionList.reset();\n                if(!/apply|digest/.test(scope.$root.$$phase)) scope.$apply();\n              }\n            }\n          };\n\n          $document.on('click blur', documentClick);\n\n          scope.$on('$destroy', function() {\n            $document.off('click blur', documentClick);\n          });\n        }\n      };\n    }]);\n\n\n  /**\n   * @ngdoc directive\n   * @name tiTranscludeAppend\n   * @module cnTagsInput\n   *\n   * @description\n   * Re-creates the old behavior of ng-transclude. Used internally by tagsInput directive.\n   */\n  tagsInput.directive('tiTranscludeAppend', function() {\n    return function(scope, element, attrs, ctrl, transcludeFn) {\n      transcludeFn(function(clone) {\n        element.append(clone);\n      });\n    };\n  });\n\n  /**\n   * @ngdoc directive\n   * @name tiAutosize\n   * @module cnTagsInput\n   *\n   * @description\n   * Automatically sets the input's width so its content is always visible. Used internally by tagsInput directive.\n   */\n  tagsInput.directive('tiAutosize', function() {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function(scope, element, attrs, ctrl) {\n        var THRESHOLD = 3,\n            span, resize;\n\n        span = angular.element('<span class=\"input\"></span>');\n        span.css('display', 'none')\n            .css('visibility', 'hidden')\n            .css('width', 'auto')\n            .css('white-space', 'pre');\n\n        element.parent().append(span);\n\n        resize = function(originalValue) {\n          var value = originalValue, width;\n\n          if(angular.isString(value) && value.length === 0) {\n            value = attrs.placeholder;\n          }\n\n          if(value) {\n            span.text(value);\n            span.css('display', '');\n            width = span.prop('offsetWidth');\n            span.css('display', 'none');\n          }\n\n          element.css('width', width ? width + THRESHOLD + 'px' : '');\n\n          return originalValue;\n        };\n\n        ctrl.$parsers.unshift(resize);\n        ctrl.$formatters.unshift(resize);\n\n        attrs.$observe('placeholder', function(value) {\n          if(!ctrl.$modelValue) {\n            resize(value);\n          }\n        });\n      }\n    };\n  });\n\n  /**\n   * @ngdoc service\n   * @name tagsInputConfig\n   * @module cnTagsInput\n   *\n   * @description\n   * Sets global configuration settings for both tagsInput and autoComplete directives. It's also used internally to parse and\n   * initialize options from HTML attributes.\n   */\n  tagsInput.provider('tagsInputConfig', function() {\n    var globalDefaults = {}, interpolationStatus = {};\n\n    /**\n     * @ngdoc method\n     * @name setDefaults\n     * @description Sets the default configuration option for a directive.\n     * @methodOf tagsInputConfig\n     *\n     * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput' or 'autoComplete'.\n     * @param {object} defaults Object containing options and their values.\n     *\n     * @returns {object} The service itself for chaining purposes.\n     */\n    this.setDefaults = function(directive, defaults) {\n      globalDefaults[directive] = defaults;\n      return this;\n    };\n\n    /***\n     * @ngdoc method\n     * @name setActiveInterpolation\n     * @description Sets active interpolation for a set of options.\n     * @methodOf tagsInputConfig\n     *\n     * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput' or 'autoComplete'.\n     * @param {object} options Object containing which options should have interpolation turned on at all times.\n     *\n     * @returns {object} The service itself for chaining purposes.\n     */\n    this.setActiveInterpolation = function(directive, options) {\n      interpolationStatus[directive] = options;\n      return this;\n    };\n\n    this.$get = [\"$interpolate\", function($interpolate) {\n      var converters = {};\n      converters[String] = function(value) {\n        return value;\n      };\n      converters[Number] = function(value) {\n        return parseInt(value, 10);\n      };\n      converters[Boolean] = function(value) {\n        return value.toLowerCase() === 'true';\n      };\n      converters[RegExp] = function(value) {\n        return new RegExp(value);\n      };\n      converters[Object] = function(value) {\n        return typeof value === 'object' ? value : Object(value);\n      };\n\n      return {\n        load: function(directive, scope, attrs, options) {\n          scope.options = {};\n          scope.attrs = attrs;\n          scope.uid = _.uniqueId();\n\n          angular.forEach(options, function(value, key) {\n            var type, localDefault, converter, getDefault, updateValue;\n\n            type = value[0];\n            localDefault = value[1];\n            converter = converters[type];\n\n            getDefault = function() {\n              var globalValue = globalDefaults[directive] && globalDefaults[directive][key];\n              return angular.isDefined(globalValue) ? globalValue : localDefault;\n            };\n\n            updateValue = function(value) {\n              scope.options[key] = value ? converter(value) : getDefault();\n            };\n\n            if(scope[key]) {\n              updateValue(scope[key]);\n            }\n            else if(interpolationStatus[directive] && interpolationStatus[directive][key]) {\n              attrs.$observe(key, function(value) {\n                updateValue(value);\n              });\n            }\n            else {\n              updateValue(attrs[key] && $interpolate(attrs[key])(scope.$parent));\n            }\n          });\n        }\n      };\n    }];\n  });\n\n\n  /* HTML templates */\n  tagsInput.run([\"$templateCache\", function($templateCache) {\n    $templateCache.put('cnTagsInput/tags-input.html', `\n        <ul class=\"list-group cn-autocomplete-list\" \n            ng-if=\"options.tagsStyle === 'list' && tagList.items.length && !options.hideTags\">\n          <li class=\"list-group-item {{options.tagClass}}\" \n              ng-repeat=\"tag in tagList.items\" \n              ng-class=\"{ selected: tag == tagList.selected }\">\n            <button ng-if=\"!ngDisabled\" \n                    ng-click=\"tagList.remove($index)\" \n                    type=\"button\" class=\"close pull-right\">\n              <span>&times;</span>\n            </button>\n            <span class=\"tag-item\" ng-bind-html=\"getDisplayHtml(tag)\"/> \n          </li>\n        </ul>\n        <div class=\"host clearfix\"\n             ng-hide=\"showBulk\"\n             ti-transclude-append=\"\">\n          <!-- hack to avoid browser's autocomplete -->\n          <input class=\"offscreen\" \n                 id=\"fake-{{attrs.id && attrs.id}}-input\" \n                 name=\"fake-{{attrs.id && attrs.id}}-input\">\n          <!-- end hack to avoid browser's autocomplete -->\n          <div class=\"input form-control tags\" \n               ng-class=\"{focused: hasFocus}\" \n               ng-disabled=\"ngDisabled\">\n            <input class=\"input\" \n                   ng-disabled=\"ngDisabled\"\n                   id=\"{{attrs.inputId || attrs.id && attrs.id + '-input-' + uid}}\"\n                   name=\"{{attrs.inputId || attrs.id && attrs.id + '-input-' + uid}}\"\n                   placeholder=\"{{options.placeholder}}\" \n                   tabindex=\"{{options.tabindex}}\" \n                   ng-model=\"newTag.text\" \n                   ng-model-options=\"{updateOn: 'default'}\" \n                   ng-change=\"newTagChange()\" \n                   ng-trim=\"false\" \n                   ng-class=\"{\n                      'invalid-tag': newTag.invalid,\n                      'hide-below': options.maxTags === 1 && tagList.items.length\n                   }\" \n                   ti-autosize=\"\"\n                   autocomplete=\"off\">\n            <span class=\"tag-item label {{options.tagClass}} label-block\"\n                  ng-if=\"options.tagsStyle !== 'list' && !options.hideTags && options.maxTags === 1 && tagList.items.length\"\n                  title=\"{{getDisplayText(tagList.items[0])}}\">\n              <span ng-bind-html=\"getDisplayHtml(tagList.items[0])\"/> \n              <a class=\"remove-button\" \n                 ng-if=\"!ngDisabled && !options.dropdownIcon\"\n                 ng-click=\"tagList.remove()\">\n                <span>&times;</span>\n              </a>\n            </span>\n            <ul class=\"tag-list\" \n                ng-if=\"options.tagsStyle !== 'list' && !options.hideTags && options.maxTags !== 1\">\n              <li class=\"tag-item label {{options.tagClass}}\" \n                  ng-repeat=\"tag in tagList.items\" \n                  ng-class=\"{ selected: tag == tagList.selected }\">\n                <span ng-bind-html=\"getDisplayHtml(tag)\"/> \n                <a class=\"remove-button\" \n                   ng-if=\"!ngDisabled\"\n                   ng-click=\"tagList.remove($index)\">\n                  <span>&times;</span>\n                </a>\n              </li>\n            </ul>\n            <button ng-if=\"options.showButton && options.dropdownIcon\"\n                    class=\"btn form-control-icon\" ng-disabled=\"ngDisabled\" tabindex=\"-1\">\n              <i class=\"{{options.dropdownStyle}}\"></i>\n            </button>\n          </div>\n        </div>\n        <div class=\"help-block\">\n          <button class=\"btn btn-default btn-xs\" style=\"border-right: 1px solid #D6D7DB\" ng-show=\"options.allowBulk && !showBulk\" ng-click=\"showBulk = true\">Batch</button>\n          <button class=\"btn btn-default btn-xs\" ng-show=\"options.showClearAll && tagList.items.length\" ng-click=\"tagList.removeAll()\">Clear</button>\n        </div>\n        <div ng-show=\"showBulk\" class=\"clearfix\">\n          <textarea class=\"form-control\" ng-model=\"bulkTags\" placeholder=\"{{options.bulkPlaceholder}}\"></textarea>\n          <p class=\"help-block\">\n            Press \"Enter\" to submit, \"Shift+Enter\" to add a new line\n          </p>\n          <div class=\"btn-group help-block\">\n            <button class=\"btn btn-default btn-xs\" style=\"border-right: 1px solid #D6D7DB\" ng-click=\"showBulk = false\">Cancel</button>\n          </div>\n        </div>`\n    );\n\n    $templateCache.put('cnTagsInput/auto-complete.html', `\n        <div ng-if=\"!suggestionList.items.length && !options.groupBy\" \n             ng-class=\"{open: suggestionList.visible}\">\n          <ul class=\"autocomplete dropdown-menu\">\n            <li class=\"dropdown-header\" ng-bind-html=\"suggestionList.visible && noResultsMessage(suggestionList)\"></li>\n          </ul>\n        </div>\n        <div ng-if=\"suggestionList.items.length && isGroups\" \n             ng-class=\"{open: suggestionList.visible}\">\n          <ul class=\"autocomplete dropdown-menu\">\n            <li ng-if=\"!suggestionList.items[0].items.length && !suggestionList.items[1].items.length\" class=\"dropdown-header\">No results...</li>\n            <li ng-repeat-start=\"group in suggestionList.items\"></li>\n            <li class=\"dropdown-header\" ng-show=\"group.items.length\">{{group.label | titleCase}}</li>\n            <li ng-repeat=\"item in group.items\" \n                class=\"suggestion\" \n                ng-class=\"{selected: item == suggestionList.selected, disabled: item.disabled}\" \n                ng-click=\"addSuggestion($event)\" \n                ng-mouseenter=\"suggestionList.select(group.indexes[$index])\" \n                ng-bind-html=\"highlight(item, group.label)\">\n            </li>\n            <li class=\"divider\" ng-show=\"!$last && $parent.suggestionList.items[$index+1].items.length\"></li>\n            <li ng-repeat-end></li>\n          </ul>\n        </div>\n        <div ng-if=\"suggestionList.items.length && !isGroups && !options.groupBy\" \n             ng-class=\"{open: suggestionList.visible}\">\n          <ul class=\"autocomplete dropdown-menu\">\n            <li ng-repeat=\"item in suggestionList.items\" \n                class=\"suggestion\" \n                ng-class=\"{selected: item == suggestionList.selected, disabled: item.disabled}\" \n                ng-click=\"addSuggestion($event)\" \n                ng-mouseenter=\"suggestionList.select($index)\" \n                ng-bind-html=\"highlight(item)\">\n            </li>\n          </ul>\n        </div>\n        <div ng-if=\"!isGroups && options.groupBy\" \n             ng-class=\"{open: suggestionList.visible}\">\n          <ul class=\"autocomplete dropdown-menu\">\n            <li ng-repeat-start=\"(group, items) in suggestionList.items\"></li>\n            <li class=\"dropdown-header\" ng-show=\"items.length\">{{group | titleCase}}</li>\n            <li ng-repeat=\"item in items\" \n                class=\"suggestion\" \n                ng-class=\"{selected: item == suggestionList.selected, disabled: item.disabled}\" \n                ng-click=\"addSuggestion($event)\" \n                ng-mouseenter=\"suggestionList.select(suggestionList.items[group].indexes[$index])\" \n                ng-bind-html=\"highlight(item)\">\n            </li>\n            <li class=\"divider\" ng-show=\"!$last && items.length\"></li>\n            <li ng-repeat-end></li>\n          </ul>\n        </div>`\n    );\n  }]);\n})();\n"]}